{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"jsonpath-plus\"","webpack:///external \"lodash\"","webpack:///external \"errno\"","webpack:///./src/application-error.js","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"glob\"","webpack:///external \"yaml\"","webpack:///./src/const/result-type.js","webpack:///./src/validator.js","webpack:///external \"json-pointer\"","webpack:///external \"ajv\"","webpack:///./node_modules/.pnpm/registry.npmjs.org/ajv-oai/1.2.0_ajv@6.12.0/node_modules/ajv-oai/lib/format-validator.js","webpack:///./node_modules/.pnpm/registry.npmjs.org/ajv-oai/1.2.0_ajv@6.12.0/node_modules/ajv-oai/lib/constants.js","webpack:///external \"decimal.js\"","webpack:///./src/impl/index.js","webpack:///./src/impl/v2/index.js","webpack:///./src/impl/v3/index.js","webpack:///./src/utils/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","ErrorType","jsENOENT","code","ENOENT","jsonPathNotFound","errorAndErrorsMutuallyExclusive","validation","ApplicationError","err","message","path","cause","type","options","merge","params","constructor","assign","this","fs","glob","yaml","jsonPath","JSONPath","createError","custom","ResultType","getValidatorFactory","compileValidate","Determiner","createValidationResponse","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","validateExamples","openapiSpec","impl","getImplementation","prepare","pathsExamples","getJsonPathsToExamples","reduce","res","pathToExamples","concat","jsonPathToExamples","json","resultType","_extractExamplePaths","statistics","_initStatistics","validationResult","valid","errors","createValidator","_initValidatorFactory","validationMap","buildValidationMap","error","push","schemaPaths","keys","schemasWithExamples","length","forEach","pathSchema","pathExample","example","_getObjectByPath","schema","_extractSchema","curErrors","_validateExample","map","examplePath","toPointer","toPathArray","splice","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","extension","split","pop","includes","_isFileTypeYaml","parse","readFileSync","JSON","_validate","validationHandler","examplesTotal","examplesWithoutSchema","flatten","wrap","filePathExample","validate","exampleFilePath","specSchema","allErrors","nullable","suppressErrorIfNotFound","validateFile","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","cwdToMappingFile","matchingFilePathsMapping","responses","sync","nonull","filePathMapExternalExamples","mapExternalExamples","dirPathMapExternalExamples","entries","flatMap","filePathsExample","resolvedFilePathExample","join","_handleExamplesByMapValidation","dirname","mapFilePath","response","response2","response1","val","parent","parentProperty","pointer","JsonPointer","Ajv","FormatValidator","ID__SPEC_SCHEMA","_replaceRefsToPreparedSpecSchema","callback","payload","startsWith","preparedSpecSchema","refSchema","substring","definition","set","_createReferenceSchema","validator","addSchema","addFormat","int32","int64","float","double","byte","_addFormatValidators","responseSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","compile","RANGES","data","Number","isInteger","max","greaterThanOrEqualTo","min","lessThanOrEqualTo","len","test","firstPaddingChar","indexOf","Decimal","pow","negated","implV2","implV3","REGEX__OPEN_API","swagger","openapi","match","pathSegs","slice","idxExamples","lastIndexOf","toPathString","_getSchemaPathOfExample","Set","add","ExampleType","exampleTypesOfSchemas","Map","idxExample","exampleType","pathSchemaAsArray","exampleTypeOfSchema","pathContextAsArray","pathContext","_throwMutuallyExclusiveError"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash\");","module.exports = require(\"errno\");","const\n    _ = require('lodash'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            _.merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && _.merge(options, { params: { path } });\n            cause && _.merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","/**\n * Entry-point for the validator-API\n */\n\nconst\n    _ = require('lodash'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse } = require('./utils');\n\n// CONSTANTS\n\nconst FILE_EXTENSIONS__YAML = [\n    'yaml',\n    'yml'\n];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {ValidationResponse}\n */\nfunction validateExamples(openapiSpec) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec);\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_extractExamplePaths(openapiSpec, pathToExamples));\n        }, []);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec);\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath    File-path to the OpenAPI-spec\n * @returns {ValidationResponse}\n */\nfunction validateFile(filePath) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec);\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @returns {ValidationResponse}\n */\nfunction validateExamplesByMap(filePathSchema, globMapExternalExamples, { cwdToMappingFile } = {}) {\n    let matchingFilePathsMapping = 0;\n    const responses = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    ).map(filePathMapExternalExamples => {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec);\n        } catch (err) {\n            return createValidationResponse({ errors: [ApplicationError.create(err)] });\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        return _validate(\n            Object.keys(mapExternalExamples),\n            statistics => _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics, {\n                cwdToMappingFile,\n                dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n            }).map((/** @type ApplicationError */ error) => Object.assign(error, {\n                mapFilePath: filePathMapExternalExamples\n            }))\n        );\n    });\n    return _.merge(\n        responses.reduce((res, response) => {\n            if (!res) { return response; }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema      File-path to the OpenAPI-spec\n * @param {String}  pathSchema          JSON-path to the schema\n * @param {String}  filePathExample     File-path to the external example-file\n * @returns {ValidationResponse}\n */\nfunction validateExample(filePathSchema, pathSchema, filePathExample) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec);\n        schema = _extractSchema(pathSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        [pathSchema],\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nfunction _parseSpec(filePath) {\n    if (_isFileTypeYaml(filePath)) {\n        return yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n    return JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {Array.<String>}      schemaPaths             JSON-paths to the schemas\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(schemaPaths, validationHandler) {\n    const statistics = _initStatistics({ schemaPaths }),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return _(mapExternalExamples)\n        .entries()\n        .flatMap(([pathSchema, filePathsExample]) => {\n            let schema = null;\n            try {\n                schema = _extractSchema(pathSchema, openapiSpec);\n            } catch (/** @type ErrorJsonPathNotFound */ err) {\n                // If the schema can't be found, don't even attempt to process the examples\n                return ApplicationError.create(err);\n            }\n            return _([filePathsExample])\n                .flatten()\n                .flatMap(filePathExample => {\n                    let example = null;\n                    try {\n                        const resolvedFilePathExample = cwdToMappingFile\n                            ? path.join(dirPathMapExternalExamples, filePathExample)\n                            : filePathExample;\n                        example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                    } catch (err) {\n                        return ApplicationError.create(err);\n                    }\n                    return _validateExample({\n                        createValidator: _initValidatorFactory(openapiSpec),\n                        schema,\n                        example,\n                        statistics,\n                        filePathExample\n                    });\n                })\n                .value();\n        })\n        .value();\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: _.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: ResultType.path\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec);\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPaths = Object.keys(validationMap);\n    validationResult.statistics.schemasWithExamples = schemaPaths.length;\n    schemaPaths.forEach(pathSchema => {\n        _validateSchema({ openapiSpec, createValidator, pathSchema, validationMap, statistics,\n            validationResult });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathSchema          JSON-path to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({ openapiSpec, createValidator, pathSchema, validationMap, statistics,\n    validationResult }) {\n    const errors = validationResult.errors;\n    validationMap[pathSchema].forEach(pathExample => {\n        const example = _getObjectByPath(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(pathSchema, openapiSpec, true),\n            curErrors = _validateExample({\n                createValidator,\n                schema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) { return; }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @param {Array.<String>}  [schemaPaths=[]]    JSON-paths schemas\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics({ schemaPaths=[] } = {}) {\n    return {\n        schemasWithExamples: schemaPaths.length,\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: ResultType.value\n    });\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.schemasWithExamples--;\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) { return errors; }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) { return error; }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema) {\n    return getValidatorFactory(specSchema, {\n        allErrors: true,\n        nullable: true\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathSchema                          JSON-path to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(pathSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${ pathSchema }'`, {\n            params: {\n                path: pathSchema\n            }\n        });\n    }\n    return schema;\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"glob\");","module.exports = require(\"yaml\");","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv'),\n    FormatValidator = require('ajv-oai/lib/format-validator');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__REPSONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        validator.addSchema(preparedSpecSchema);\n        _addFormatValidators(validator);\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__REPSONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n    return validator.compile(preparedResponseSchema);\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n\n/**\n * Adds format-validators that are not included in the reference-implementation\n * @param {ajv.Ajv} validator\n * @private\n */\nfunction _addFormatValidators(validator) {\n    validator.addFormat('int32', { type: 'number', validate: FormatValidator.int32 });\n    validator.addFormat('int64', { type: 'string', validate: FormatValidator.int64 });\n    validator.addFormat('float', { type: 'number', validate: FormatValidator.float });\n    validator.addFormat('double', { type: 'number', validate: FormatValidator.double });\n    validator.addFormat('byte', { type: 'string', validate: FormatValidator.byte });\n}\n","module.exports = require(\"json-pointer\");","module.exports = require(\"ajv\");","const RANGES = require('./constants');\n\n/**\n * OpenAPI 2.0 data types format\n * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types\n */\n\n/**\n * Check that the data is integer and int32\n * @param {number} data\n * @returns {boolean}\n */\nfunction int32(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int32.max.greaterThanOrEqualTo(data) &&\n    RANGES.int32.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is integer and int64\n * @param {number} data\n * @returns {boolean}\n */\nfunction int64(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int64.max.greaterThanOrEqualTo(data) &&\n    RANGES.int64.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is float\n * @param {number} data\n * @returns {boolean}\n */\nfunction float(data) {\n  return (\n    RANGES.float.max.greaterThanOrEqualTo(data) &&\n    RANGES.float.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is double\n * @param {number} data\n * @returns {boolean}\n */\nfunction double(data) {\n  return (\n    RANGES.double.max.greaterThanOrEqualTo(data) &&\n    RANGES.double.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is string and base64 encoded characters.\n * https://github.com/chriso/validator.js/blob/master/src/lib/isBase64.js\n * @param {string} data\n * @returns {boolean}\n */\nfunction byte(data) {\n  /* eslint-disable no-useless-escape */\n  const notBase64 = /[^A-Z0-9+\\/=]/i;\n  /* eslint-enable no-useless-escape */\n\n  const len = data.length;\n  if (!len || len % 4 !== 0 || notBase64.test(data)) {\n    return false;\n  }\n  const firstPaddingChar = data.indexOf('=');\n  return firstPaddingChar === -1 ||\n    firstPaddingChar === len - 1 ||\n    (firstPaddingChar === len - 2 && data[len - 1] === '=');\n}\n\nmodule.exports = {\n  int32,\n  int64,\n  float,\n  double,\n  byte,\n};\n","const Decimal = require('decimal.js');\n\n// Numeric type ranges\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\n// https://msdn.microsoft.com/en-us/library/s3f49ktz.aspx\n// https://en.wikipedia.org/wiki/C_data_types\n\nconst RANGES = {\n  byte: {\n    min: new Decimal('-128'),\n    max: new Decimal('127'),\n  },\n\n  int32: {\n    min: new Decimal('-2147483648'),\n    max: new Decimal('2147483647'),\n  },\n\n  int64: {\n    min: new Decimal('-9223372036854775808'),\n    max: new Decimal('9223372036854775807'),\n  },\n\n  float: {\n    min: new Decimal(2).pow(128).negated(),\n    max: new Decimal(2).pow(128),\n  },\n\n  double: {\n    min: new Decimal(2).pow(1024).negated(),\n    max: new Decimal(2).pow(1024),\n  },\n};\n\nmodule.exports = RANGES;\n","module.exports = require(\"decimal.js\");","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec) {\n    // No pre-processing yet, so we return the original\n    return openapiSpec;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { ApplicationError, ErrorType } = require('../../application-error');\n\n// CONSTANTS\n\nconst PATH__EXAMPLE = '$..responses..content.application/json.example',\n    PATH__EXAMPLES = '$..responses..content.application/json.examples..value',\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples..value',\n    PATH__EXAMPLE__REQUEST_BODY = '$..requestBody.content.application/json.example',\n    PATH__EXAMPLES__REQUEST_BODY = '$..requestBody.content.application/json.examples..value',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPathOfExample(pathExample),\n            pathSchema = jsonPath.toPathString(pathSchemaAsArray),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec) {\n    // None yet. I added this to implement `nullable` until I figured there was a property for that.\n    // I'll leave this here for now, as pre-processing might become necessary for other things.\n    // A \"cloneDeep\"-function will be required though (eg. `lodash.clonedeep`-dependency)\n    return openapiSpec;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n *\n * It is assumed that the JSON-path to the example is valid and existing.\n * @param {String}  pathExample JSON-path to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: jsonPath.toPointer(pathContextAsArray)\n        }\n    });\n}\n","module.exports = {\n    createValidationResponse\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n"],"sourceRoot":""}