{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"jsonpath-plus\"","webpack:///external \"errno\"","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"glob\"","webpack:///./src/validator.js","webpack:///external \"json-pointer\"","webpack:///external \"ajv\"","webpack:///./src/impl/index.js","webpack:///./src/impl/v2/index.js","webpack:///./src/impl/v3/index.js","webpack:///./src/application-error.js","webpack:///./src/utils/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","fs","path","glob","jsonPath","JSONPath","createError","custom","_require2","getValidatorFactory","compileValidate","Determiner","ApplicationError","ERR_TYPE__JSON_PATH_NOT_FOUND","createValidationResponse","PROP__SCHEMA","PROP__EXAMPLES","ErrorJsonPathNotFound","validateExamples","swaggerSpec","pathsExamples","createValidator","_initValidatorFactory","validationMap","reduce","pathExample","pathSchema","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","length","toPathString","_getSchemaPathOfExample","_buildValidationMap","schemaPaths","keys","statistics","_initStatistics","validationResult","valid","errors","forEach","pathResponseSchema","example","_getObjectByPath","responseSchema","_extractResponseSchema","curErrors","_validateExample","map","error","examplePath","toPointer","_validateExamplesPaths","jsonPathToExamples","json","resultType","_extractExamplePaths","getImplementation","getJsonPathToExamples","_validate","pathsResponseSchema","validationHandler","responseSchemasWithExamples","responseExamplesTotal","responseExamplesWithoutSchema","flatten","wrap","filePathExample","validate","concat","exampleFilePath","specSchema","allErrors","suppressErrorIfNotFound","schema","params","default","validateFile","filePath","JSON","parse","readFileSync","err","validateExample","filePathSchema","validateExamplesByMap","globMapExternalExamples","cwdToMappingFile","matchingFilePathsMapping","responses","sync","nonull","filePathMapExternalExamples","mapExternalExamples","dirPathMapExternalExamples","entries","flatMap","filePathsExample","resolvedFilePathExample","join","_handleExamplesByMapValidation","dirname","assign","mapFilePath","merge","res","response","response1","response2","val","_mergeValidationResponses","JsonPointer","Ajv","PROP__ID","JSON_PATH__REFS","ID__SPEC_SCHEMA","ID__REPSONSE_SCHEMA","options","preparedSpecSchema","refSchema","[object Object]","callback","startsWith","pointer","substring","definition","set","_createReferenceSchema","validator","addSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","type","payload","parent","parentProperty","_replaceRefsToPreparedSpecSchema","compile","implV2","implV3","REGEX__OPEN_API","swagger","openapi","match","PATH__EXAMPLES","ENOENT","code","ERR_TYPE__VALIDATION","message","cause","constructor","this","_objectSpread","ERR_TYPE__JS_ENOENT"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"errno\");","const\n    _ = require('lodash'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { createError } = require('errno').custom,\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    ApplicationError = require('./application-error'),\n    { ERR_TYPE__JSON_PATH_NOT_FOUND } = ApplicationError,\n    { createValidationResponse } = require('./utils');\n\n// CONSTANTS\n\nconst\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ERR_TYPE__JSON_PATH_NOT_FOUND);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      responseSchemasWithExamples: number,\n *      responseExamplesTotal: number,\n *      responseExamplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates Swagger-spec with embedded examples.\n * @param {Object}  swaggerSpec         Swagger-spec\n * @returns {ValidationResponse}\n */\nfunction validateExamples(swaggerSpec) {\n    const jsonPathToExamples = Determiner.getImplementation(swaggerSpec).getJsonPathToExamples(),\n        pathsExamples = _extractExamplePaths(swaggerSpec, jsonPathToExamples);\n    return _validateExamplesPaths(pathsExamples, swaggerSpec);\n}\n\n/**\n * Validates Swagger-spec with embedded examples.\n * @param {string}  filePath    File-path to the swagger-spec\n * @returns {ValidationResponse}\n */\nfunction validateFile(filePath) {\n    let swaggerSpec = null;\n    try {\n        swaggerSpec = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(swaggerSpec);\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the Swagger-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to response-schemas as key and a single file-path or Array of\n *                                              file-paths to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @returns {ValidationResponse}\n */\nfunction validateExamplesByMap(filePathSchema, globMapExternalExamples, { cwdToMappingFile } = {}) {\n    let matchingFilePathsMapping = 0;\n    const responses = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    ).map(filePathMapExternalExamples => {\n        let mapExternalExamples = null,\n            swaggerSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            swaggerSpec = JSON.parse(fs.readFileSync(filePathSchema, 'utf-8'));\n        } catch (err) {\n            return createValidationResponse({ errors: [ApplicationError.create(err)] });\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        return _validate(\n            Object.keys(mapExternalExamples),\n            statistics => _handleExamplesByMapValidation(swaggerSpec, mapExternalExamples, statistics, {\n                cwdToMappingFile,\n                dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n            }).map((/** @type ApplicationError */ error) => Object.assign(error, {\n                mapFilePath: filePathMapExternalExamples\n            }))\n        );\n    });\n    return _.merge(\n        responses.reduce((res, response) => {\n            if (!res) { return response; }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema      File-path to the Swagger-spec\n * @param {String}  pathResponseSchema  JSON-path to the response-schema\n * @param {String}  filePathExample     File-path to the external example-file\n * @returns {ValidationResponse}\n */\nfunction validateExample(filePathSchema, pathResponseSchema, filePathExample) {\n    let example = null,\n        responseSchema = null,\n        swaggerSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        swaggerSpec = JSON.parse(fs.readFileSync(filePathSchema, 'utf-8'));\n        responseSchema = _extractResponseSchema(pathResponseSchema, swaggerSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        [pathResponseSchema],\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(swaggerSpec),\n            responseSchema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {Array.<String>}      pathsResponseSchema     JSON-paths to the schemas of the responses\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(pathsResponseSchema, validationHandler) {\n    const statistics = _initStatistics({ schemaPaths: pathsResponseSchema }),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  swaggerSpec                     Swagger-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to response-\n *                                                                  schemas as key and a single file-path or Array of\n *                                                                  file-paths to\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(swaggerSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return _(mapExternalExamples)\n        .entries()\n        .flatMap(([pathResponseSchema, filePathsExample]) => {\n            let responseSchema = null;\n            try {\n                responseSchema = _extractResponseSchema(pathResponseSchema, swaggerSpec);\n            } catch (/** @type ErrorJsonPathNotFound */ err) {\n                // If the response-schema can't be found, don't even attempt to process the examples\n                return ApplicationError.create(err);\n            }\n            return _([filePathsExample])\n                .flatten()\n                .flatMap(filePathExample => {\n                    let example = null;\n                    try {\n                        const resolvedFilePathExample = cwdToMappingFile\n                            ? path.join(dirPathMapExternalExamples, filePathExample)\n                            : filePathExample;\n                        example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                    } catch (err) {\n                        return ApplicationError.create(err);\n                    }\n                    return _validateExample({\n                        createValidator: _initValidatorFactory(swaggerSpec),\n                        responseSchema,\n                        example,\n                        statistics,\n                        filePathExample\n                    });\n                })\n                .value();\n        })\n        .value();\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: _.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics({ schemaPaths: [] }))\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a Swagger-spec\n * @param {Object}  swaggerSpec         Swagger-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the Swagger-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(swaggerSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: swaggerSpec,\n        path: jsonPathToExamples,\n        resultType: 'path'\n    });\n}\n\n/**\n * Validates examples at the given paths in the Swagger-spec.\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          swaggerSpec     Swagger-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths(pathsExamples, swaggerSpec) {\n    const\n        createValidator = _initValidatorFactory(swaggerSpec),\n        validationMap = _buildValidationMap(pathsExamples),\n        schemaPaths = Object.keys(validationMap),\n        statistics = _initStatistics({ schemaPaths }),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        };\n    schemaPaths.forEach(pathResponseSchema => {\n        const\n            errors = validationResult.errors,\n            pathExample = validationMap[pathResponseSchema],\n            example = _getObjectByPath(pathExample, swaggerSpec),\n            // Missing response-schemas may occur and are considered valid\n            responseSchema = _extractResponseSchema(pathResponseSchema, swaggerSpec, true),\n            curErrors = _validateExample({\n                createValidator,\n                responseSchema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) { return; }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n    return validationResult;\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @param {Array.<String>}  schemaPaths     JSON-paths to the response-schemas\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics({ schemaPaths }) {\n    return {\n        responseSchemasWithExamples: schemaPaths.length,\n        responseExamplesTotal: 0,\n        responseExamplesWithoutSchema: 0\n    };\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: 'value'\n    });\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction _buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = pathExample;\n        return validationMap;\n    }, {});\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      responseSchema      JSON-schema for the response\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, responseSchema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.responseExamplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!responseSchema) {\n        statistics.responseSchemasWithExamples--;\n        statistics.responseExamplesWithoutSchema++;\n        return errors;\n    }\n    const validate = compileValidate(createValidator(), responseSchema);\n    if (validate(example)) { return errors; }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) { return error; }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const\n        pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema) {\n    return getValidatorFactory(specSchema, {\n        allErrors: true\n    });\n}\n\n/**\n * Extracts the response-schema in the Swagger-spec at the given JSON-path.\n * @param   {string}    pathResponseSchema                  JSON-path to response-schema\n * @param   {Object}    swaggerSpec                         Swagger-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no response-schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractResponseSchema(pathResponseSchema, swaggerSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathResponseSchema, swaggerSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to response-schema can't be found: '${pathResponseSchema}'`, {\n            params: {\n                path: pathResponseSchema\n            }\n        });\n    }\n    return schema;\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"glob\");","const { JSONPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/swagger-examples-validator/defs.json',\n    ID__REPSONSE_SCHEMA = 'https://www.npmjs.com/package/swagger-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  Swagger-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        validator.addSchema(preparedSpecSchema);\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__REPSONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n    return validator.compile(preparedResponseSchema);\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin swagger-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    // eslint-disable-next-line new-cap\n    JSONPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    // eslint-disable-next-line new-cap\n    JSONPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = require(\"json-pointer\");","module.exports = require(\"ajv\");","const implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the Swagger-spec. Currently v2 and v3 are supported\n * @param {Object}  swaggerSpec Swagger-spec\n * @returns {Object|null}\n */\nfunction getImplementation(swaggerSpec) {\n    if (typeof swaggerSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (swaggerSpec.openapi && swaggerSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json';\n\nmodule.exports = {\n    getJsonPathToExamples\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPath to the examples\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToExamples() { return PATH__EXAMPLES; }\n","// CONSTANTS\n\nconst PATH__EXAMPLES = '$..responses..content.application/json.examples..value';\n\n// PUBLIC API\n\nmodule.exports = {\n    getJsonPathToExamples\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPath to the examples\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToExamples() { return PATH__EXAMPLES; }\n","const\n    _ = require('lodash'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const\n            { ERR_TYPE__VALIDATION } = ApplicationError,\n            { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ERR_TYPE__VALIDATION,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ERR_TYPE__VALIDATION === type) {\n            // If it's an validation-error, copy all properties\n            _.merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && _.merge(options, { params: { path } });\n            cause && _.merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = ApplicationError;\n\n// PUBLIC STATICS\n\n// Types of errors\nApplicationError.ERR_TYPE__VALIDATION = 'Validation';\nApplicationError.ERR_TYPE__JSON_PATH_NOT_FOUND = 'JsonPathNotFound';\nApplicationError.ERR_TYPE__JS_ENOENT = ENOENT.code;\n\n","module.exports = {\n    createValidationResponse\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n"],"sourceRoot":""}