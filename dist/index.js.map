{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 180a0619ef53f7bb2e9d","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"jsonpath-plus\"","webpack:///external \"ajv\""],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","validateExamples","jsonSchema","pathsExamples","_extractExamplePaths","_validateExamplesPaths","validateFile","filePath","JSON","parse","fs","readFileSync","jsonPath","json","path","PATH__EXAMPLES","resultType","validator","_createValidator","validationMap","_buildValidationMap","schemaPaths","Object","keys","statistics","_initStatistics","validationResult","valid","forEach","pathResponseSchema","_validationResult$err","schema","_getObjectByPath","examples","_getExamples","curErrors","_validateExamples","responseExamplesTotal","errors","splice","apply","concat","_ref","responseSchemasWithExamples","responseExamplesWithoutSchema","wrap","pathExamples","result","flatten","reduce","pathExample","pathSchema","_getSchemaPathOfExample","_ref2","example","validate","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","PROP__EXAMPLES","PROP__SCHEMA","toPathString","Ajv","allErrors","defineProperty","value","default","require"],"mappings":"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","file":"index.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tvar fs = __webpack_require__(1),\n\t    jsonPath = __webpack_require__(2),\n\t    Ajv = __webpack_require__(3);\n\t\n\t// PUBLIC API\n\t\n\texports.default = validateExamples;\n\texports.validateFile = validateFile;\n\t\n\t// IMPLEMENTATION DETAILS\n\t\n\tvar PROP__SCHEMA = 'schema',\n\t    PROP__EXAMPLES = 'examples',\n\t    PATH__EXAMPLES = '$..' + PROP__EXAMPLES + '.application/json';\n\t\n\t// Public\n\t\n\tfunction validateExamples(jsonSchema) {\n\t    var pathsExamples = _extractExamplePaths(jsonSchema);\n\t    return _validateExamplesPaths(pathsExamples, jsonSchema);\n\t}\n\t\n\tfunction validateFile(filePath) {\n\t    var jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n\t    return validateExamples(jsonSchema);\n\t}\n\t\n\t// Private\n\t\n\tfunction _extractExamplePaths(jsonSchema) {\n\t    return jsonPath({\n\t        json: jsonSchema,\n\t        path: PATH__EXAMPLES,\n\t        resultType: 'path'\n\t    });\n\t}\n\t\n\tfunction _validateExamplesPaths(pathsExamples, jsonSchema) {\n\t    var validator = _createValidator(),\n\t        validationMap = _buildValidationMap(pathsExamples),\n\t        schemaPaths = Object.keys(validationMap),\n\t        statistics = _initStatistics({ schemaPaths: schemaPaths }),\n\t        validationResult = {\n\t        valid: true,\n\t        statistics: statistics\n\t    };\n\t    schemaPaths.forEach(function (pathResponseSchema) {\n\t        var _validationResult$err;\n\t\n\t        var schema = _getObjectByPath(pathResponseSchema, jsonSchema),\n\t            examples = _getExamples(validationMap[pathResponseSchema], jsonSchema),\n\t            curErrors = _validateExamples({ validator: validator, schema: schema, examples: examples, statistics: statistics });\n\t        statistics.responseExamplesTotal += examples.length;\n\t        if (!curErrors.length) {\n\t            return;\n\t        }\n\t        validationResult.valid = false;\n\t        var errors = validationResult.errors;\n\t        if (!errors) {\n\t            errors = [];\n\t            validationResult.errors = errors;\n\t        }\n\t        (_validationResult$err = validationResult.errors).splice.apply(_validationResult$err, [errors.length - 1, 0].concat(_toConsumableArray(curErrors)));\n\t    });\n\t    return validationResult;\n\t}\n\t\n\tfunction _initStatistics(_ref) {\n\t    var schemaPaths = _ref.schemaPaths;\n\t\n\t    return {\n\t        responseSchemasWithExamples: schemaPaths.length,\n\t        responseExamplesTotal: 0,\n\t        responseExamplesWithoutSchema: 0\n\t    };\n\t}\n\t\n\tfunction _getObjectByPath(path, schema) {\n\t    return jsonPath({\n\t        json: schema,\n\t        path: path,\n\t        wrap: false,\n\t        resultType: 'value'\n\t    });\n\t}\n\t\n\tfunction _getExamples(pathExamples, jsonSchema) {\n\t    var result = jsonPath({\n\t        json: jsonSchema,\n\t        path: pathExamples,\n\t        flatten: true,\n\t        wrap: false,\n\t        resultType: 'value'\n\t    });\n\t    return Array.isArray(result) ? result : [result];\n\t}\n\t\n\t/**\n\t * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value\n\t * @param {Array.<String>}  pathsExamples   Paths to the examples\n\t * @returns {Object.<String, Array.<String>>}   Map with schema-path as key and example-paths as value\n\t * @private\n\t */\n\tfunction _buildValidationMap(pathsExamples) {\n\t    return pathsExamples.reduce(function (validationMap, pathExample) {\n\t        var pathSchema = _getSchemaPathOfExample(pathExample);\n\t        validationMap[pathSchema] = pathExample;\n\t        return validationMap;\n\t    }, {});\n\t}\n\t\n\t/**\n\t * Validates examples against the schema.\n\t * @param {Object}          validator   JSON-schema validator\n\t * @param {Object}          schema      JSON-schema to validate the examples against\n\t * @param {Array.<Object>}  examples    Examples to validate\n\t * @param {Object}          statistics  Object to contain statistics metrics\n\t * @returns {Array.<Object>}    Array with errors. Empty array, if examples are valid\n\t * @private\n\t */\n\tfunction _validateExamples(_ref2) {\n\t    var validator = _ref2.validator,\n\t        schema = _ref2.schema,\n\t        examples = _ref2.examples,\n\t        statistics = _ref2.statistics;\n\t\n\t    var errors = [];\n\t    // No schema, no validation\n\t    if (!schema) {\n\t        // Examples without schema are considered valid\n\t        statistics.responseSchemasWithExamples--;\n\t        statistics.responseExamplesWithoutSchema++;\n\t        return errors;\n\t    }\n\t    return examples.reduce(function (errors, example) {\n\t        var valid = validator.validate(schema, example);\n\t        if (valid) {\n\t            return errors;\n\t        }\n\t        return errors.concat.apply(errors, _toConsumableArray(validator.errors));\n\t    }, errors);\n\t}\n\t\n\tfunction _getSchemaPathOfExample(pathExample) {\n\t    var pathSegs = jsonPath.toPathArray(pathExample).slice(),\n\t        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n\t    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n\t    // Workaround for issue: https://github.com/s3u/JSONPath/issues/78\n\t    pathSegs.length && pathSegs[0] !== '$' && pathSegs.splice(0, 0, '$');\n\t    return jsonPath.toPathString(pathSegs);\n\t}\n\t\n\tfunction _createValidator() {\n\t    return new Ajv({\n\t        allErrors: true\n\t    });\n\t}\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"jsonpath-plus\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"ajv\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 180a0619ef53f7bb2e9d","const\n    fs = require('fs'),\n    jsonPath = require('jsonpath-plus'),\n    Ajv = require('ajv');\n\n// PUBLIC API\n\nexport default validateExamples;\nexport {\n    validateFile\n};\n\n// IMPLEMENTATION DETAILS\n\nconst\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples',\n    PATH__EXAMPLES = `$..${ PROP__EXAMPLES }.application/json`;\n\n// Public\n\nfunction validateExamples(jsonSchema) {\n    const pathsExamples = _extractExamplePaths(jsonSchema);\n    return _validateExamplesPaths(pathsExamples, jsonSchema);\n}\n\nfunction validateFile(filePath) {\n    const jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    return validateExamples(jsonSchema);\n}\n\n// Private\n\nfunction _extractExamplePaths(jsonSchema) {\n    return jsonPath({\n        json: jsonSchema,\n        path: PATH__EXAMPLES,\n        resultType: 'path'\n    });\n}\n\nfunction _validateExamplesPaths(pathsExamples, jsonSchema) {\n    const\n        validator = _createValidator(),\n        validationMap = _buildValidationMap(pathsExamples),\n        schemaPaths = Object.keys(validationMap),\n        statistics = _initStatistics({ schemaPaths }),\n        validationResult = {\n            valid: true,\n            statistics\n        };\n    schemaPaths.forEach(pathResponseSchema => {\n        const\n            schema = _getObjectByPath(pathResponseSchema, jsonSchema),\n            examples = _getExamples(validationMap[pathResponseSchema], jsonSchema),\n            curErrors = _validateExamples({ validator, schema, examples, statistics });\n        statistics.responseExamplesTotal += examples.length;\n        if (!curErrors.length) { return; }\n        validationResult.valid = false;\n        let errors = validationResult.errors;\n        if (!errors) {\n            errors = [];\n            validationResult.errors = errors;\n        }\n        validationResult.errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n    return validationResult;\n}\n\nfunction _initStatistics({ schemaPaths }) {\n    return {\n        responseSchemasWithExamples: schemaPaths.length,\n        responseExamplesTotal: 0,\n        responseExamplesWithoutSchema: 0\n    };\n}\n\nfunction _getObjectByPath(path, schema) {\n    return jsonPath({\n        json: schema,\n        path,\n        wrap: false,\n        resultType: 'value'\n    });\n}\n\nfunction _getExamples(pathExamples, jsonSchema) {\n    const result = jsonPath({\n        json: jsonSchema,\n        path: pathExamples,\n        flatten: true,\n        wrap: false,\n        resultType: 'value'\n    });\n    return Array.isArray(result) ? result : [result];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, Array.<String>>}   Map with schema-path as key and example-paths as value\n * @private\n */\nfunction _buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const\n            pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = pathExample;\n        return validationMap;\n    }, {});\n}\n\n/**\n * Validates examples against the schema.\n * @param {Object}          validator   JSON-schema validator\n * @param {Object}          schema      JSON-schema to validate the examples against\n * @param {Array.<Object>}  examples    Examples to validate\n * @param {Object}          statistics  Object to contain statistics metrics\n * @returns {Array.<Object>}    Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExamples({ validator, schema, examples, statistics }) {\n    const errors = [];\n    // No schema, no validation\n    if (!schema) {\n        // Examples without schema are considered valid\n        statistics.responseSchemasWithExamples--;\n        statistics.responseExamplesWithoutSchema++;\n        return errors;\n    }\n    return examples.reduce((errors, example) => {\n        const valid = validator.validate(schema, example);\n        if (valid) { return errors; }\n        return errors.concat(...validator.errors);\n    }, errors);\n}\n\nfunction _getSchemaPathOfExample(pathExample) {\n    const\n        pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    // Workaround for issue: https://github.com/s3u/JSONPath/issues/78\n    pathSegs.length && pathSegs[0] !== '$' && pathSegs.splice(0, 0, '$');\n    return jsonPath.toPathString(pathSegs);\n}\n\nfunction _createValidator() {\n    return new Ajv({\n        allErrors: true\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"jsonpath-plus\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsonpath-plus\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"ajv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ajv\"\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}