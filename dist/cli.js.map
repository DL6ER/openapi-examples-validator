{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"errno\"","webpack:///./src/cli.js","webpack:///./package.json","webpack:///external \"commander\"","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"glob\"","webpack:///external \"jsonpath-plus\"","webpack:///external \"ajv\"","webpack:///./src/application-error.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","VERSION","version","program","_require","validateFile","validateExample","validateExamplesByMap","arguments","description","option","action","filepath","options","schemaJsonpath","exampleFilepath","mappingFilepath","cwdToMappingFile","result","console","log","statistics","_statistics$responseS","responseSchemasWithExamples","_statistics$responseE","responseExamplesWithoutSchema","_statistics$responseE2","responseExamplesTotal","matchingFilePathsMapping","strStatistics","push","process","stdout","write","join","_printStatistics","valid","exit","stderr","JSON","stringify","errors","_handleResult","on","parse","argv","main","engines","node","bin","swagger-examples-validator","scripts","start-dev","build","build:clean","build:webpack","coverage","coveralls","test","test:mocha","release","release:stage-artifacts","repository","type","url","keywords","author","license","bugs","homepage","devDependencies","@babel/cli","@babel/core","@babel/node","@babel/preset-env","@babel/register","babel-eslint","babel-loader","chai","eslint","eslint-loader","json-loader","mocha","mocha-lcov-reporter","nyc","rimraf","standard-version","uglifyjs-webpack-plugin","webpack","webpack-cli","dependencies","ajv","commander","errno","glob","jsonpath-plus","lodash","_","fs","path","jsonPath","JSONPath","Ajv","createError","custom","ApplicationError","ERR_TYPE__JSON_PATH_NOT_FOUND","PROP__SCHEMA","PROP__EXAMPLES","PATH__EXAMPLES","ErrorJsonPathNotFound","validateExamples","swaggerSpec","pathsExamples","validator","_createValidator","validationMap","reduce","pathExample","pathSchema","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","length","toPathString","_getSchemaPathOfExample","_buildValidationMap","schemaPaths","keys","_initStatistics","validationResult","forEach","pathResponseSchema","example","_getObjectByPath","responseSchema","_extractResponseSchema","curErrors","_validateExample","map","error","examplePath","toPointer","_validateExamplesPaths","json","resultType","_extractExamplePaths","_validate","pathsResponseSchema","validationHandler","_createValidationResponse","flatten","wrap","validate","concat","allErrors","suppressErrorIfNotFound","schema","params","default","filePath","readFileSync","err","filePathSchema","filePathExample","exampleFilePath","globMapExternalExamples","responses","sync","nonull","filePathMapExternalExamples","mapExternalExamples","dirPathMapExternalExamples","entries","flatMap","filePathsExample","resolvedFilePathExample","_handleExamplesByMapValidation","dirname","assign","mapFilePath","merge","res","response","response1","response2","val","_mergeValidationResponses","ENOENT","code","[object Object]","ERR_TYPE__VALIDATION","message","cause","constructor","this","_objectSpread","ERR_TYPE__JS_ENOENT"],"mappings":"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","file":"cli.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"lodash\");","module.exports = require(\"errno\");","// Shebang will be added by webpack\n//#!/usr/bin/env node --harmony\n\nconst\n    VERSION = require('../package.json').version,\n    program = require('commander'),\n    { validateFile, validateExample, validateExamplesByMap } = require('./index');\n\n// DEFINE CLI\n\nprogram\n    .version(VERSION)\n    .arguments('<filepath>')\n    .description('Validate embedded examples in Swagger-JSONs.\\n'\n        + '  To validate external examples, use the `-s` and `-e` option.\\n'\n        + '  To pass a mapping-file, to validate multiple external examples, use the `-m` option.')\n    .option('-s, --schema-jsonpath <schema-jsonpath>', 'JSON-path to schema, to validate the example file against')\n    .option('-e, --example-filepath <example-filepath>', 'file path to example file, to be validated')\n    .option('-m, --mapping-filepath <mapping-filepath>', 'file path to map, containing schema-paths as key and the'\n        + ' file-path(s) to examples as value. If wildcards are used, the parameter has to be put in quotes.')\n    .option('-c, --cwd-to-mapping-file', \"changes to the directory of the mapping-file, before resolving the example's\"\n        + ' paths. Use this option, if your mapping-files use relative paths for the examples')\n    .action(processAction);\nprogram.on('--help', () => {\n    console.log('\\n\\n  Example for external example-file:\\n');\n    console.log('    $ swagger-examples-validator -s $.paths./.get.responses.200.schema -e example.json'\n        + ' swagger.json\\n\\n');\n});\nprogram.parse(process.argv);\n\n// IMPLEMENTATION DETAILS\n\nfunction processAction(filepath, options) {\n    const { schemaJsonpath, exampleFilepath, mappingFilepath, cwdToMappingFile } = options;\n    let result = null;\n    if (mappingFilepath) {\n        console.log('Validating with mapping file');\n        result = validateExamplesByMap(filepath, mappingFilepath, { cwdToMappingFile });\n    } else if (schemaJsonpath && exampleFilepath) {\n        console.log('Validating single external example');\n        result = validateExample(filepath, schemaJsonpath, exampleFilepath);\n    } else {\n        console.log('Validating examples');\n        result = validateFile(filepath);\n    }\n    _handleResult(result);\n}\n\nfunction _handleResult(result) {\n    _printStatistics(result.statistics);\n    if (result.valid) {\n        process.stdout.write('\\nNo errors found.\\n\\n');\n        process.exit(0);\n    }\n    process.stdout.write('\\nErrors found.\\n\\n');\n    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n    process.exit(1);\n}\n\nfunction _printStatistics(statistics) {\n    const {\n            responseSchemasWithExamples = '-',\n            responseExamplesWithoutSchema = '-',\n            responseExamplesTotal = '-',\n            matchingFilePathsMapping\n        } = statistics,\n        strStatistics = [\n            `Response schemas with examples found: ${ responseSchemasWithExamples }`,\n            `Response examples without schema found: ${ responseExamplesWithoutSchema }`,\n            `Total examples found: ${ responseExamplesTotal }`\n        ];\n    if (matchingFilePathsMapping != null) {\n        strStatistics.push(`Matching mapping files found: ${ matchingFilePathsMapping }`);\n    }\n    process.stdout.write(`${ strStatistics.join('\\n') }\\n`);\n}\n","module.exports = {\"name\":\"swagger-examples-validator\",\"version\":\"1.0.0\",\"description\":\"Validates embedded examples in Swagger-JSONs\",\"main\":\"dist/index.js\",\"engines\":{\"node\":\">=6\"},\"bin\":{\"swagger-examples-validator\":\"dist/cli.js\"},\"scripts\":{\"start-dev\":\"babel-node src/cli\",\"build\":\"npm run build:clean && npm run build:webpack\",\"build:clean\":\"rimraf dist\",\"build:webpack\":\"webpack --bail --progress --profile --mode production --config ./webpack/config.babel.js\",\"coverage\":\"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\"coveralls\":\"cat ./coverage/lcov.info | coveralls\",\"test\":\"npm run build && npm run test:mocha\",\"test:mocha\":\"BABEL_DISABLE_CACHE=1 mocha --require \\\"@babel/register\\\" --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\"release\":\"npm run build && npm run release:stage-artifacts && standard-version -a\",\"release:stage-artifacts\":\"git add dist/*\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/codekie/swagger-examples-validator.git\"},\"keywords\":[\"swagger\",\"json\",\"validate\",\"examples\"],\"author\":\"Josua Amann\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/codekie/swagger-examples-validator/issues\"},\"homepage\":\"https://github.com/codekie/swagger-examples-validator#readme\",\"devDependencies\":{\"@babel/cli\":\"^7.1.2\",\"@babel/core\":\"^7.1.2\",\"@babel/node\":\"^7.0.0\",\"@babel/preset-env\":\"^7.1.0\",\"@babel/register\":\"^7.0.0\",\"babel-eslint\":\"^10.0.1\",\"babel-loader\":\"^8.0.4\",\"chai\":\"^4.2.0\",\"coveralls\":\"^3.0.2\",\"eslint\":\"^5.6.1\",\"eslint-loader\":\"^2.1.1\",\"json-loader\":\"^0.5.7\",\"mocha\":\"^5.2.0\",\"mocha-lcov-reporter\":\"^1.3.0\",\"nyc\":\"^13.3.0\",\"rimraf\":\"^2.6.2\",\"standard-version\":\"^4.4.0\",\"uglifyjs-webpack-plugin\":\"^2.0.1\",\"webpack\":\"^4.20.2\",\"webpack-cli\":\"^3.1.2\"},\"dependencies\":{\"ajv\":\"^6.5.4\",\"commander\":\"^2.19.0\",\"errno\":\"0.1.7\",\"glob\":\"^7.1.3\",\"jsonpath-plus\":\"0.18.0\",\"lodash\":\"^4.17.11\"}}","module.exports = require(\"commander\");","const\n    _ = require('lodash'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    Ajv = require('ajv'),\n    { createError } = require('errno').custom,\n    ApplicationError = require('./application-error'),\n    { ERR_TYPE__JSON_PATH_NOT_FOUND } = ApplicationError;\n\n// CONSTANTS\n\nconst\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples',\n    PATH__EXAMPLES = `$..${ PROP__EXAMPLES }.application/json`;\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ERR_TYPE__JSON_PATH_NOT_FOUND);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      responseSchemasWithExamples: number,\n *      responseExamplesTotal: number,\n *      responseExamplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates Swagger-spec with embedded examples.\n * @param {Object}  swaggerSpec Swagger-spec\n * @returns {ValidationResponse}\n */\nfunction validateExamples(swaggerSpec) {\n    const pathsExamples = _extractExamplePaths(swaggerSpec);\n    return _validateExamplesPaths(pathsExamples, swaggerSpec);\n}\n\n/**\n * Validates Swagger-spec with embedded examples.\n * @param {string}  filePath    File-path to the swagger-spec\n * @returns {ValidationResponse}\n */\nfunction validateFile(filePath) {\n    let swaggerSpec = null;\n    try {\n        swaggerSpec = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    } catch (err) {\n        return _createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(swaggerSpec);\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the Swagger-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to response-schemas as key and a single file-path or Array of\n *                                              file-paths to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @returns {ValidationResponse}\n */\nfunction validateExamplesByMap(filePathSchema, globMapExternalExamples, { cwdToMappingFile } = {}) {\n    let matchingFilePathsMapping = 0;\n    const responses = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    ).map(filePathMapExternalExamples => {\n        let mapExternalExamples = null,\n            swaggerSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            swaggerSpec = JSON.parse(fs.readFileSync(filePathSchema, 'utf-8'));\n        } catch (err) {\n            return _createValidationResponse({ errors: [ApplicationError.create(err)] });\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        return _validate(\n            Object.keys(mapExternalExamples),\n            statistics => _handleExamplesByMapValidation(swaggerSpec, mapExternalExamples, statistics, {\n                cwdToMappingFile,\n                dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n            }).map((/** @type ApplicationError */ error) => Object.assign(error, {\n                mapFilePath: filePathMapExternalExamples\n            }))\n        );\n    });\n    return _.merge(\n        responses.reduce((res, response) => {\n            if (!res) { return response; }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema      File-path to the Swagger-spec\n * @param {String}  pathResponseSchema  JSON-path to the response-schema\n * @param {String}  filePathExample     File-path to the external example-file\n * @returns {ValidationResponse}\n */\nfunction validateExample(filePathSchema, pathResponseSchema, filePathExample) {\n    let example = null,\n        responseSchema = null,\n        swaggerSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        swaggerSpec = JSON.parse(fs.readFileSync(filePathSchema, 'utf-8'));\n        responseSchema = _extractResponseSchema(pathResponseSchema, swaggerSpec);\n    } catch (err) {\n        return _createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        [pathResponseSchema],\n        statistics => _validateExample({\n            validator: _createValidator(),\n            responseSchema,\n            example,\n            statistics\n        }).map(error => {\n            error.exampleFilePath = filePathExample;\n            return error;\n        })\n    );\n}\n\n// Private\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {Array.<String>}      pathsResponseSchema     JSON-paths to the schemas of the responses\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(pathsResponseSchema, validationHandler) {\n    const statistics = _initStatistics({ schemaPaths: pathsResponseSchema }),\n        errors = validationHandler(statistics);\n    return _createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  swaggerSpec                     Swagger-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to response-\n *                                                                  schemas as key and a single file-path or Array of\n *                                                                  file-paths to\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(swaggerSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return _(mapExternalExamples)\n        .entries()\n        .flatMap(([pathResponseSchema, filePathsExample]) => {\n            let responseSchema = null;\n            try {\n                responseSchema = _extractResponseSchema(pathResponseSchema, swaggerSpec);\n            } catch (/** @type ErrorJsonPathNotFound */ err) {\n                // If the response-schema can't be found, don't even attempt to process the examples\n                return ApplicationError.create(err);\n            }\n            return _([filePathsExample])\n                .flatten()\n                .flatMap(filePathExample => {\n                    let example = null;\n                    try {\n                        const resolvedFilePathExample = cwdToMappingFile\n                            ? path.join(dirPathMapExternalExamples, filePathExample)\n                            : filePathExample;\n                        example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                    } catch (err) {\n                        return ApplicationError.create(err);\n                    }\n                    return _validateExample({\n                        validator: _createValidator(),\n                        responseSchema,\n                        example,\n                        statistics\n                    }).map(error => {\n                        error.exampleFilePath = filePathExample;\n                        return error;\n                    });\n                })\n                .value();\n        })\n        .value();\n}\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction _createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return _createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: _.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics({ schemaPaths: [] }))\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a Swagger-spec\n * @param {Object}  swaggerSpec Swagger-spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(swaggerSpec) {\n    return jsonPath({\n        json: swaggerSpec,\n        path: PATH__EXAMPLES,\n        resultType: 'path'\n    });\n}\n\n/**\n * Validates examples at the given paths in the Swagger-spec.\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          swaggerSpec     Swagger-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths(pathsExamples, swaggerSpec) {\n    const\n        validator = _createValidator(),\n        validationMap = _buildValidationMap(pathsExamples),\n        schemaPaths = Object.keys(validationMap),\n        statistics = _initStatistics({ schemaPaths }),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        };\n    schemaPaths.forEach(pathResponseSchema => {\n        const\n            errors = validationResult.errors,\n            pathExample = validationMap[pathResponseSchema],\n            example = _getObjectByPath(pathExample, swaggerSpec),\n            // Missing response-schemas may occur and are considered valid\n            responseSchema = _extractResponseSchema(pathResponseSchema, swaggerSpec, true),\n            curErrors = _validateExample({\n                validator,\n                responseSchema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) { return; }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n    return validationResult;\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @param {Array.<String>}  schemaPaths     JSON-paths to the response-schemas\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics({ schemaPaths }) {\n    return {\n        responseSchemasWithExamples: schemaPaths.length,\n        responseExamplesTotal: 0,\n        responseExamplesWithoutSchema: 0\n    };\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: 'value'\n    });\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction _buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = pathExample;\n        return validationMap;\n    }, {});\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {ajv}     validator       JSON-schema validator\n * @param {Object}  responseSchema  JSON-schema for the response\n * @param {Object}  example         Example to validate\n * @param {Object}  statistics      Object to contain statistics metrics\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ validator, responseSchema, example, statistics }) {\n    const\n        errors = [];\n    statistics.responseExamplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!responseSchema) {\n        statistics.responseSchemasWithExamples--;\n        statistics.responseExamplesWithoutSchema++;\n        return errors;\n    }\n    if (validator.validate(responseSchema, example)) { return errors; }\n    return errors.concat(...validator.errors.map(ApplicationError.create));\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const\n        pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _createValidator() {\n    return new Ajv({\n        allErrors: true\n    });\n}\n\n/**\n * Extracts the response-schema in the Swagger-spec at the given JSON-path.\n * @param   {string}    pathResponseSchema                  JSON-path to response-schema\n * @param   {Object}    swaggerSpec                         Swagger-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no response-schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractResponseSchema(pathResponseSchema, swaggerSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathResponseSchema, swaggerSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to response-schema can't be found: '${ pathResponseSchema }'`, {\n            params: {\n                path: pathResponseSchema\n            }\n        });\n    }\n    return schema;\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"glob\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"ajv\");","const\n    _ = require('lodash'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const\n            { ERR_TYPE__VALIDATION } = ApplicationError,\n            { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ERR_TYPE__VALIDATION,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ERR_TYPE__VALIDATION === type) {\n            // If it's an validation-error, copy all properties\n            _.merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && _.merge(options, { params: { path } });\n            cause && _.merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = ApplicationError;\n\n// PUBLIC STATICS\n\n// Types of errors\nApplicationError.ERR_TYPE__VALIDATION = 'Validation';\nApplicationError.ERR_TYPE__JSON_PATH_NOT_FOUND = 'JsonPathNotFound';\nApplicationError.ERR_TYPE__JS_ENOENT = ENOENT.code;\n\n"],"sourceRoot":""}