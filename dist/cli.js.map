{"version":3,"sources":["webpack:///cli.js","webpack:///webpack/bootstrap 136b924fc143f8e55ed8","webpack:///./src/cli.js","webpack:///./package.json","webpack:///external \"commander\"","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"jsonpath-plus\"","webpack:///external \"ajv\""],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_validateFileAndExit","filePath","result","validateFile","_printStatistics","statistics","valid","process","stdout","write","exit","stderr","JSON","stringify","errors","strStatistics","responseSchemasWithExamples","responseExamplesWithoutSchema","responseExamplesTotal","join","VERSION","version","program","_require","arguments","description","action","parse","argv","name","main","bin","swagger-examples-validator","scripts","build","build:clean","build:webpack","coverage","test","test:mocha","release","release:stage-artifacts","repository","type","url","keywords","author","license","bugs","homepage","devDependencies","babel-cli","babel-core","babel-eslint","babel-loader","babel-plugin-transform-es2015-classes","babel-plugin-transform-es2015-parameters","babel-plugin-transform-object-rest-spread","babel-polyfill","babel-preset-es2015","babel-preset-es2015-webpack","babel-register","chai","eslint","eslint-loader","json-loader","mocha","nyc","rimraf","standard-version","webpack","dependencies","ajv","commander","jsonpath-plus","require","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","validateExamples","jsonSchema","pathsExamples","_extractExamplePaths","_validateExamplesPaths","fs","readFileSync","jsonPath","json","path","PATH__EXAMPLES","resultType","validator","_createValidator","validationMap","_buildValidationMap","schemaPaths","Object","keys","_initStatistics","validationResult","forEach","pathResponseSchema","_validationResult$err","schema","_getObjectByPath","examples","_getExamples","curErrors","_validateExamples","splice","apply","concat","_ref","wrap","pathExamples","flatten","reduce","pathExample","pathSchema","_getSchemaPathOfExample","_ref2","example","validate","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","PROP__EXAMPLES","PROP__SCHEMA","toPathString","Ajv","allErrors","defineProperty","value","default"],"mappings":"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","file":"cli.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// Shebang will be added by webpack\n\t//#!/usr/bin/env node --harmony\n\t\n\tvar VERSION = __webpack_require__(1).version,\n\t    program = __webpack_require__(2),\n\t    _require = __webpack_require__(3),\n\t    validateFile = _require.validateFile;\n\t\n\t// DEFINE CLI\n\t\n\tprogram.version(VERSION).arguments('<filePath>').description('Validate embedded examples in Swagger-JSONs').action(function (filePath) {\n\t    return _validateFileAndExit(filePath);\n\t});\n\tprogram.parse(process.argv);\n\t\n\t// IMPLEMENTATION DETAILS\n\t\n\tfunction _validateFileAndExit(filePath) {\n\t    var result = validateFile(filePath);\n\t    _printStatistics(result.statistics);\n\t    if (result.valid) {\n\t        process.stdout.write('\\nNo errors found.\\n\\n');\n\t        process.exit(0);\n\t    }\n\t    process.stdout.write('\\nErrors found.\\n\\n');\n\t    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n\t    process.exit(1);\n\t}\n\t\n\tfunction _printStatistics(statistics) {\n\t    var strStatistics = ['Response schemas with examples found: ' + statistics.responseSchemasWithExamples, 'Response examples without schema found: ' + statistics.responseExamplesWithoutSchema, 'Total examples found: ' + statistics.responseExamplesTotal].join('\\n');\n\t    process.stdout.write(strStatistics + '\\n');\n\t}\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"name\": \"swagger-examples-validator\",\n\t\t\"version\": \"0.3.1\",\n\t\t\"description\": \"Validates embedded examples in Swagger-JSONs\",\n\t\t\"main\": \"dist/index.js\",\n\t\t\"bin\": {\n\t\t\t\"swagger-examples-validator\": \"dist/cli.js\"\n\t\t},\n\t\t\"scripts\": {\n\t\t\t\"build\": \"npm run build:clean && npm run build:webpack\",\n\t\t\t\"build:clean\": \"rimraf dist\",\n\t\t\t\"build:webpack\": \"webpack --bail --progress --profile --config ./webpack/config.babel.js\",\n\t\t\t\"coverage\": \"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\n\t\t\t\"test\": \"npm run build && npm run test:mocha\",\n\t\t\t\"test:mocha\": \"BABEL_DISABLE_CACHE=1 mocha --require \\\"babel-register\\\" --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\n\t\t\t\"release\": \"npm run build && npm run release:stage-artifacts && standard-version -a\",\n\t\t\t\"release:stage-artifacts\": \"git add dist/*\"\n\t\t},\n\t\t\"repository\": {\n\t\t\t\"type\": \"git\",\n\t\t\t\"url\": \"git+https://github.com/codekie/swagger-examples-validator.git\"\n\t\t},\n\t\t\"keywords\": [\n\t\t\t\"swagger\",\n\t\t\t\"json\",\n\t\t\t\"validate\",\n\t\t\t\"examples\"\n\t\t],\n\t\t\"author\": \"Josua Amann\",\n\t\t\"license\": \"MIT\",\n\t\t\"bugs\": {\n\t\t\t\"url\": \"https://github.com/codekie/swagger-examples-validator/issues\"\n\t\t},\n\t\t\"homepage\": \"https://github.com/codekie/swagger-examples-validator#readme\",\n\t\t\"devDependencies\": {\n\t\t\t\"babel-cli\": \"6.18.0\",\n\t\t\t\"babel-core\": \"6.21.0\",\n\t\t\t\"babel-eslint\": \"7.1.1\",\n\t\t\t\"babel-loader\": \"6.2.10\",\n\t\t\t\"babel-plugin-transform-es2015-classes\": \"6.18.0\",\n\t\t\t\"babel-plugin-transform-es2015-parameters\": \"6.21.0\",\n\t\t\t\"babel-plugin-transform-object-rest-spread\": \"6.20.2\",\n\t\t\t\"babel-polyfill\": \"6.20.0\",\n\t\t\t\"babel-preset-es2015\": \"6.18.0\",\n\t\t\t\"babel-preset-es2015-webpack\": \"6.4.3\",\n\t\t\t\"babel-register\": \"6.18.0\",\n\t\t\t\"chai\": \"3.5.0\",\n\t\t\t\"eslint\": \"3.13.1\",\n\t\t\t\"eslint-loader\": \"1.6.1\",\n\t\t\t\"json-loader\": \"0.5.4\",\n\t\t\t\"mocha\": \"3.2.0\",\n\t\t\t\"nyc\": \"10.0.0\",\n\t\t\t\"rimraf\": \"2.5.4\",\n\t\t\t\"standard-version\": \"4.0.0\",\n\t\t\t\"webpack\": \"1.14.0\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"ajv\": \"4.10.4\",\n\t\t\t\"commander\": \"2.9.0\",\n\t\t\t\"jsonpath-plus\": \"0.15.0\"\n\t\t}\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"commander\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tvar fs = __webpack_require__(4),\n\t    jsonPath = __webpack_require__(5),\n\t    Ajv = __webpack_require__(6);\n\t\n\t// PUBLIC API\n\t\n\texports.default = validateExamples;\n\texports.validateFile = validateFile;\n\t\n\t// IMPLEMENTATION DETAILS\n\t\n\tvar PROP__SCHEMA = 'schema',\n\t    PROP__EXAMPLES = 'examples',\n\t    PATH__EXAMPLES = '$..' + PROP__EXAMPLES + '.application/json';\n\t\n\t// Public\n\t\n\tfunction validateExamples(jsonSchema) {\n\t    var pathsExamples = _extractExamplePaths(jsonSchema);\n\t    return _validateExamplesPaths(pathsExamples, jsonSchema);\n\t}\n\t\n\tfunction validateFile(filePath) {\n\t    var jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n\t    return validateExamples(jsonSchema);\n\t}\n\t\n\t// Private\n\t\n\tfunction _extractExamplePaths(jsonSchema) {\n\t    return jsonPath({\n\t        json: jsonSchema,\n\t        path: PATH__EXAMPLES,\n\t        resultType: 'path'\n\t    });\n\t}\n\t\n\tfunction _validateExamplesPaths(pathsExamples, jsonSchema) {\n\t    var validator = _createValidator(),\n\t        validationMap = _buildValidationMap(pathsExamples),\n\t        schemaPaths = Object.keys(validationMap),\n\t        statistics = _initStatistics({ schemaPaths: schemaPaths }),\n\t        validationResult = {\n\t        valid: true,\n\t        statistics: statistics\n\t    };\n\t    schemaPaths.forEach(function (pathResponseSchema) {\n\t        var _validationResult$err;\n\t\n\t        var schema = _getObjectByPath(pathResponseSchema, jsonSchema),\n\t            examples = _getExamples(validationMap[pathResponseSchema], jsonSchema),\n\t            curErrors = _validateExamples({ validator: validator, schema: schema, examples: examples, statistics: statistics });\n\t        statistics.responseExamplesTotal += examples.length;\n\t        if (!curErrors.length) {\n\t            return;\n\t        }\n\t        validationResult.valid = false;\n\t        var errors = validationResult.errors;\n\t        if (!errors) {\n\t            errors = [];\n\t            validationResult.errors = errors;\n\t        }\n\t        (_validationResult$err = validationResult.errors).splice.apply(_validationResult$err, [errors.length - 1, 0].concat(_toConsumableArray(curErrors)));\n\t    });\n\t    return validationResult;\n\t}\n\t\n\tfunction _initStatistics(_ref) {\n\t    var schemaPaths = _ref.schemaPaths;\n\t\n\t    return {\n\t        responseSchemasWithExamples: schemaPaths.length,\n\t        responseExamplesTotal: 0,\n\t        responseExamplesWithoutSchema: 0\n\t    };\n\t}\n\t\n\tfunction _getObjectByPath(path, schema) {\n\t    return jsonPath({\n\t        json: schema,\n\t        path: path,\n\t        wrap: false,\n\t        resultType: 'value'\n\t    });\n\t}\n\t\n\tfunction _getExamples(pathExamples, jsonSchema) {\n\t    var result = jsonPath({\n\t        json: jsonSchema,\n\t        path: pathExamples,\n\t        flatten: true,\n\t        wrap: false,\n\t        resultType: 'value'\n\t    });\n\t    return Array.isArray(result) ? result : [result];\n\t}\n\t\n\t/**\n\t * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value\n\t * @param {Array.<String>}  pathsExamples   Paths to the examples\n\t * @returns {Object.<String, Array.<String>>}   Map with schema-path as key and example-paths as value\n\t * @private\n\t */\n\tfunction _buildValidationMap(pathsExamples) {\n\t    return pathsExamples.reduce(function (validationMap, pathExample) {\n\t        var pathSchema = _getSchemaPathOfExample(pathExample);\n\t        validationMap[pathSchema] = pathExample;\n\t        return validationMap;\n\t    }, {});\n\t}\n\t\n\t/**\n\t * Validates examples against the schema.\n\t * @param {Object}          validator   JSON-schema validator\n\t * @param {Object}          schema      JSON-schema to validate the examples against\n\t * @param {Array.<Object>}  examples    Examples to validate\n\t * @param {Object}          statistics  Object to contain statistics metrics\n\t * @returns {Array.<Object>}    Array with errors. Empty array, if examples are valid\n\t * @private\n\t */\n\tfunction _validateExamples(_ref2) {\n\t    var validator = _ref2.validator,\n\t        schema = _ref2.schema,\n\t        examples = _ref2.examples,\n\t        statistics = _ref2.statistics;\n\t\n\t    var errors = [];\n\t    // No schema, no validation\n\t    if (!schema) {\n\t        // Examples without schema are considered valid\n\t        statistics.responseSchemasWithExamples--;\n\t        statistics.responseExamplesWithoutSchema++;\n\t        return errors;\n\t    }\n\t    return examples.reduce(function (errors, example) {\n\t        var valid = validator.validate(schema, example);\n\t        if (valid) {\n\t            return errors;\n\t        }\n\t        return errors.concat.apply(errors, _toConsumableArray(validator.errors));\n\t    }, errors);\n\t}\n\t\n\tfunction _getSchemaPathOfExample(pathExample) {\n\t    var pathSegs = jsonPath.toPathArray(pathExample).slice(),\n\t        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n\t    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n\t    // Workaround for issue: https://github.com/s3u/JSONPath/issues/78\n\t    pathSegs.length && pathSegs[0] !== '$' && pathSegs.splice(0, 0, '$');\n\t    return jsonPath.toPathString(pathSegs);\n\t}\n\t\n\tfunction _createValidator() {\n\t    return new Ajv({\n\t        allErrors: true\n\t    });\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"jsonpath-plus\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"ajv\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// cli.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 136b924fc143f8e55ed8","// Shebang will be added by webpack\n//#!/usr/bin/env node --harmony\n\nconst\n    VERSION = require('../package.json').version,\n    program = require('commander'),\n    { validateFile } = require('./index');\n\n// DEFINE CLI\n\nprogram\n    .version(VERSION)\n    .arguments('<filePath>')\n    .description('Validate embedded examples in Swagger-JSONs')\n    .action(filePath => _validateFileAndExit(filePath));\nprogram.parse(process.argv);\n\n// IMPLEMENTATION DETAILS\n\nfunction _validateFileAndExit(filePath) {\n    const result = validateFile(filePath);\n    _printStatistics(result.statistics);\n    if (result.valid) {\n        process.stdout.write('\\nNo errors found.\\n\\n');\n        process.exit(0);\n    }\n    process.stdout.write('\\nErrors found.\\n\\n');\n    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n    process.exit(1);\n}\n\nfunction _printStatistics(statistics) {\n    const strStatistics = [\n        `Response schemas with examples found: ${ statistics.responseSchemasWithExamples }`,\n        `Response examples without schema found: ${ statistics.responseExamplesWithoutSchema }`,\n        `Total examples found: ${ statistics.responseExamplesTotal }`\n    ].join('\\n');\n    process.stdout.write(`${ strStatistics }\\n`);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cli.js","module.exports = {\n\t\"name\": \"swagger-examples-validator\",\n\t\"version\": \"0.3.1\",\n\t\"description\": \"Validates embedded examples in Swagger-JSONs\",\n\t\"main\": \"dist/index.js\",\n\t\"bin\": {\n\t\t\"swagger-examples-validator\": \"dist/cli.js\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"npm run build:clean && npm run build:webpack\",\n\t\t\"build:clean\": \"rimraf dist\",\n\t\t\"build:webpack\": \"webpack --bail --progress --profile --config ./webpack/config.babel.js\",\n\t\t\"coverage\": \"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\n\t\t\"test\": \"npm run build && npm run test:mocha\",\n\t\t\"test:mocha\": \"BABEL_DISABLE_CACHE=1 mocha --require \\\"babel-register\\\" --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\n\t\t\"release\": \"npm run build && npm run release:stage-artifacts && standard-version -a\",\n\t\t\"release:stage-artifacts\": \"git add dist/*\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/codekie/swagger-examples-validator.git\"\n\t},\n\t\"keywords\": [\n\t\t\"swagger\",\n\t\t\"json\",\n\t\t\"validate\",\n\t\t\"examples\"\n\t],\n\t\"author\": \"Josua Amann\",\n\t\"license\": \"MIT\",\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/codekie/swagger-examples-validator/issues\"\n\t},\n\t\"homepage\": \"https://github.com/codekie/swagger-examples-validator#readme\",\n\t\"devDependencies\": {\n\t\t\"babel-cli\": \"6.18.0\",\n\t\t\"babel-core\": \"6.21.0\",\n\t\t\"babel-eslint\": \"7.1.1\",\n\t\t\"babel-loader\": \"6.2.10\",\n\t\t\"babel-plugin-transform-es2015-classes\": \"6.18.0\",\n\t\t\"babel-plugin-transform-es2015-parameters\": \"6.21.0\",\n\t\t\"babel-plugin-transform-object-rest-spread\": \"6.20.2\",\n\t\t\"babel-polyfill\": \"6.20.0\",\n\t\t\"babel-preset-es2015\": \"6.18.0\",\n\t\t\"babel-preset-es2015-webpack\": \"6.4.3\",\n\t\t\"babel-register\": \"6.18.0\",\n\t\t\"chai\": \"3.5.0\",\n\t\t\"eslint\": \"3.13.1\",\n\t\t\"eslint-loader\": \"1.6.1\",\n\t\t\"json-loader\": \"0.5.4\",\n\t\t\"mocha\": \"3.2.0\",\n\t\t\"nyc\": \"10.0.0\",\n\t\t\"rimraf\": \"2.5.4\",\n\t\t\"standard-version\": \"4.0.0\",\n\t\t\"webpack\": \"1.14.0\"\n\t},\n\t\"dependencies\": {\n\t\t\"ajv\": \"4.10.4\",\n\t\t\"commander\": \"2.9.0\",\n\t\t\"jsonpath-plus\": \"0.15.0\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./package.json\n// module id = 1\n// module chunks = 0","module.exports = require(\"commander\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"commander\"\n// module id = 2\n// module chunks = 0","const\n    fs = require('fs'),\n    jsonPath = require('jsonpath-plus'),\n    Ajv = require('ajv');\n\n// PUBLIC API\n\nexport default validateExamples;\nexport {\n    validateFile\n};\n\n// IMPLEMENTATION DETAILS\n\nconst\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples',\n    PATH__EXAMPLES = `$..${ PROP__EXAMPLES }.application/json`;\n\n// Public\n\nfunction validateExamples(jsonSchema) {\n    const pathsExamples = _extractExamplePaths(jsonSchema);\n    return _validateExamplesPaths(pathsExamples, jsonSchema);\n}\n\nfunction validateFile(filePath) {\n    const jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    return validateExamples(jsonSchema);\n}\n\n// Private\n\nfunction _extractExamplePaths(jsonSchema) {\n    return jsonPath({\n        json: jsonSchema,\n        path: PATH__EXAMPLES,\n        resultType: 'path'\n    });\n}\n\nfunction _validateExamplesPaths(pathsExamples, jsonSchema) {\n    const\n        validator = _createValidator(),\n        validationMap = _buildValidationMap(pathsExamples),\n        schemaPaths = Object.keys(validationMap),\n        statistics = _initStatistics({ schemaPaths }),\n        validationResult = {\n            valid: true,\n            statistics\n        };\n    schemaPaths.forEach(pathResponseSchema => {\n        const\n            schema = _getObjectByPath(pathResponseSchema, jsonSchema),\n            examples = _getExamples(validationMap[pathResponseSchema], jsonSchema),\n            curErrors = _validateExamples({ validator, schema, examples, statistics });\n        statistics.responseExamplesTotal += examples.length;\n        if (!curErrors.length) { return; }\n        validationResult.valid = false;\n        let errors = validationResult.errors;\n        if (!errors) {\n            errors = [];\n            validationResult.errors = errors;\n        }\n        validationResult.errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n    return validationResult;\n}\n\nfunction _initStatistics({ schemaPaths }) {\n    return {\n        responseSchemasWithExamples: schemaPaths.length,\n        responseExamplesTotal: 0,\n        responseExamplesWithoutSchema: 0\n    };\n}\n\nfunction _getObjectByPath(path, schema) {\n    return jsonPath({\n        json: schema,\n        path,\n        wrap: false,\n        resultType: 'value'\n    });\n}\n\nfunction _getExamples(pathExamples, jsonSchema) {\n    const result = jsonPath({\n        json: jsonSchema,\n        path: pathExamples,\n        flatten: true,\n        wrap: false,\n        resultType: 'value'\n    });\n    return Array.isArray(result) ? result : [result];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, Array.<String>>}   Map with schema-path as key and example-paths as value\n * @private\n */\nfunction _buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const\n            pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = pathExample;\n        return validationMap;\n    }, {});\n}\n\n/**\n * Validates examples against the schema.\n * @param {Object}          validator   JSON-schema validator\n * @param {Object}          schema      JSON-schema to validate the examples against\n * @param {Array.<Object>}  examples    Examples to validate\n * @param {Object}          statistics  Object to contain statistics metrics\n * @returns {Array.<Object>}    Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExamples({ validator, schema, examples, statistics }) {\n    const errors = [];\n    // No schema, no validation\n    if (!schema) {\n        // Examples without schema are considered valid\n        statistics.responseSchemasWithExamples--;\n        statistics.responseExamplesWithoutSchema++;\n        return errors;\n    }\n    return examples.reduce((errors, example) => {\n        const valid = validator.validate(schema, example);\n        if (valid) { return errors; }\n        return errors.concat(...validator.errors);\n    }, errors);\n}\n\nfunction _getSchemaPathOfExample(pathExample) {\n    const\n        pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    // Workaround for issue: https://github.com/s3u/JSONPath/issues/78\n    pathSegs.length && pathSegs[0] !== '$' && pathSegs.splice(0, 0, '$');\n    return jsonPath.toPathString(pathSegs);\n}\n\nfunction _createValidator() {\n    return new Ajv({\n        allErrors: true\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"jsonpath-plus\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jsonpath-plus\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"ajv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ajv\"\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}