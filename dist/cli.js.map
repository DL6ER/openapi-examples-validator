{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"jsonpath-plus\"","webpack:///external \"errno\"","webpack:///./src/cli.js","webpack:///./package.json","webpack:///external \"commander\"","webpack:///./src/index.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"glob\"","webpack:///external \"yaml\"","webpack:///./src/validator.js","webpack:///external \"json-pointer\"","webpack:///external \"ajv\"","webpack:///./src/impl/index.js","webpack:///./src/impl/v2/index.js","webpack:///./src/impl/v3/index.js","webpack:///./src/application-error.js","webpack:///./src/utils/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","VERSION","version","program","validateFile","validateExample","validateExamplesByMap","arguments","description","option","action","filepath","options","schemaJsonpath","exampleFilepath","mappingFilepath","cwdToMappingFile","result","console","log","statistics","responseSchemasWithExamples","responseExamplesWithoutSchema","responseExamplesTotal","matchingFilePathsMapping","strStatistics","push","process","stdout","write","join","_printStatistics","valid","exit","stderr","JSON","stringify","errors","_handleResult","on","parse","argv","_","fs","path","glob","yaml","jsonPath","JSONPath","createError","custom","getValidatorFactory","compileValidate","Determiner","ApplicationError","ERR_TYPE__JSON_PATH_NOT_FOUND","createValidationResponse","PROP__SCHEMA","PROP__EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","validateExamples","openapiSpec","pathsExamples","createValidator","_initValidatorFactory","validationMap","reduce","pathExample","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","length","toPathString","_getSchemaPathOfExample","_buildValidationMap","schemaPaths","keys","_initStatistics","validationResult","forEach","pathResponseSchema","example","_getObjectByPath","responseSchema","_extractResponseSchema","curErrors","_validateExample","map","error","examplePath","toPointer","_validateResponseSchema","_validateExamplesPaths","jsonPathToExamples","json","resultType","_extractExamplePaths","getImplementation","getJsonPathToExamples","_parseSpec","filePath","extension","split","pop","includes","_isFileTypeYaml","readFileSync","_validate","pathsResponseSchema","validationHandler","flatten","wrap","filePathExample","validate","concat","exampleFilePath","specSchema","allErrors","suppressErrorIfNotFound","schema","params","err","filePathSchema","globMapExternalExamples","responses","sync","nonull","filePathMapExternalExamples","mapExternalExamples","dirPathMapExternalExamples","entries","flatMap","filePathsExample","resolvedFilePathExample","_handleExamplesByMapValidation","dirname","assign","mapFilePath","merge","res","response","response1","response2","val","_mergeValidationResponses","JsonPointer","Ajv","PROP__ID","JSON_PATH__REFS","ID__SPEC_SCHEMA","ID__REPSONSE_SCHEMA","_replaceRefsToPreparedSpecSchema","callback","type","payload","startsWith","parent","parentProperty","preparedSpecSchema","refSchema","pointer","substring","definition","set","_createReferenceSchema","validator","addSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","compile","implV2","implV3","REGEX__OPEN_API","swagger","openapi","match","PATH__EXAMPLES","ENOENT","code","ERR_TYPE__VALIDATION","message","cause","constructor","this","ERR_TYPE__JS_ENOENT"],"mappings":"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","file":"cli.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"errno\");","// Shebang will be added by webpack\n//#!/usr/bin/env node --harmony\n\nconst\n    VERSION = require('../package.json').version,\n    program = require('commander'),\n    { validateFile, validateExample, validateExamplesByMap } = require('./index');\n\n// DEFINE CLI\n\nprogram\n    .version(VERSION)\n    .arguments('<filepath>')\n    .description('Validate embedded examples in OpenAPI-specs (JSON and YAML supported).\\n'\n        + '  To validate external examples, use the `-s` and `-e` option.\\n'\n        + '  To pass a mapping-file, to validate multiple external examples, use the `-m` option.')\n    .option('-s, --schema-jsonpath <schema-jsonpath>', 'Path to OpenAPI-schema, to validate the example file against')\n    .option('-e, --example-filepath <example-filepath>', 'file path to example file, to be validated')\n    .option('-m, --mapping-filepath <mapping-filepath>', 'file path to map, containing schema-paths as key and the'\n        + ' file-path(s) to examples as value. If wildcards are used, the parameter has to be put in quotes.')\n    .option('-c, --cwd-to-mapping-file', \"changes to the directory of the mapping-file, before resolving the example's\"\n        + ' paths. Use this option, if your mapping-files use relative paths for the examples')\n    .action(processAction);\nprogram.on('--help', () => {\n    console.log('\\n\\n  Example for external example-file:\\n');\n    console.log('    $ openapi-examples-validator -s $.paths./.get.responses.200.schema -e example.json'\n        + ' openapi-spec.json\\n\\n');\n});\nprogram.parse(process.argv);\n\n// IMPLEMENTATION DETAILS\n\nfunction processAction(filepath, options) {\n    const { schemaJsonpath, exampleFilepath, mappingFilepath, cwdToMappingFile } = options;\n    let result;\n    if (mappingFilepath) {\n        console.log('Validating with mapping file');\n        result = validateExamplesByMap(filepath, mappingFilepath, { cwdToMappingFile });\n    } else if (schemaJsonpath && exampleFilepath) {\n        console.log('Validating single external example');\n        result = validateExample(filepath, schemaJsonpath, exampleFilepath);\n    } else {\n        console.log('Validating examples');\n        result = validateFile(filepath);\n    }\n    _handleResult(result);\n}\n\nfunction _handleResult(result) {\n    _printStatistics(result.statistics);\n    if (result.valid) {\n        process.stdout.write('\\nNo errors found.\\n\\n');\n        process.exit(0);\n    }\n    process.stdout.write('\\nErrors found.\\n\\n');\n    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n    process.exit(1);\n}\n\nfunction _printStatistics(statistics) {\n    const {\n            responseSchemasWithExamples,\n            responseExamplesWithoutSchema,\n            responseExamplesTotal,\n            matchingFilePathsMapping\n        } = statistics,\n        strStatistics = [\n            `Response schemas with examples found: ${ responseSchemasWithExamples }`,\n            `Response examples without schema found: ${ responseExamplesWithoutSchema }`,\n            `Total examples found: ${ responseExamplesTotal }`\n        ];\n    if (matchingFilePathsMapping != null) {\n        strStatistics.push(`Matching mapping files found: ${ matchingFilePathsMapping }`);\n    }\n    process.stdout.write(`${ strStatistics.join('\\n') }\\n`);\n}\n","module.exports = {\"name\":\"openapi-examples-validator\",\"version\":\"1.1.2\",\"description\":\"Validates embedded examples in OpenAPI-JSONs\",\"main\":\"dist/index.js\",\"engines\":{\"node\":\">=6\"},\"bin\":{\"openapi-examples-validator\":\"dist/cli.js\"},\"scripts\":{\"start-dev\":\"babel-node src/cli\",\"build\":\"npm run build:clean && npm run build:webpack\",\"build:clean\":\"rimraf dist\",\"build:webpack\":\"webpack --bail --progress --profile --mode production --config ./webpack/config.babel.js\",\"coverage\":\"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\"coveralls\":\"cat ./coverage/lcov.info | coveralls\",\"test\":\"npm run build && npm run test:mocha\",\"test-mutations\":\"stryker run\",\"test:mocha\":\"BABEL_DISABLE_CACHE=1 mocha --require \\\"@babel/register\\\" --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\"release\":\"npm run build && npm run release:stage-artifacts && standard-version -a\",\"release:stage-artifacts\":\"git add dist/*\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/codekie/openapi-examples-validator.git\"},\"keywords\":[\"swagger\",\"openapi\",\"json\",\"validate\",\"examples\"],\"author\":\"Josua Amann\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/codekie/openapi-examples-validator/issues\"},\"homepage\":\"https://github.com/codekie/openapi-examples-validator#readme\",\"devDependencies\":{\"@babel/cli\":\"^7.6.2\",\"@babel/core\":\"^7.6.2\",\"@babel/node\":\"^7.6.2\",\"@babel/preset-env\":\"^7.6.2\",\"@babel/register\":\"^7.6.2\",\"@stryker-mutator/babel-transpiler\":\"^2.1.0\",\"@stryker-mutator/core\":\"2.2.1\",\"@stryker-mutator/html-reporter\":\"^2.1.0\",\"@stryker-mutator/javascript-mutator\":\"^2.1.0\",\"@stryker-mutator/mocha-framework\":\"^2.1.0\",\"@stryker-mutator/mocha-runner\":\"^2.1.0\",\"@stryker-mutator/webpack-transpiler\":\"^2.1.0\",\"babel-eslint\":\"^10.0.3\",\"babel-loader\":\"^8.0.6\",\"chai\":\"^4.2.0\",\"coveralls\":\"^3.0.6\",\"eslint\":\"^6.4.0\",\"eslint-loader\":\"^3.0.2\",\"json-loader\":\"^0.5.7\",\"mocha\":\"^6.2.0\",\"mocha-lcov-reporter\":\"^1.3.0\",\"nyc\":\"^14.1.1\",\"rimraf\":\"^3.0.0\",\"standard-version\":\"^7.0.0\",\"stryker-cli\":\"1.0.0\",\"uglifyjs-webpack-plugin\":\"^2.2.0\",\"webpack\":\"^4.41.0\",\"webpack-cli\":\"^3.3.9\"},\"dependencies\":{\"ajv\":\"6.10.2\",\"commander\":\"^3.0.2\",\"errno\":\"0.1.7\",\"glob\":\"^7.1.4\",\"json-pointer\":\"0.6.0\",\"jsonpath-plus\":\"^1.1.0\",\"lodash\":\"^4.17.15\",\"yaml\":\"1.7.2\"}}","module.exports = require(\"commander\");","const\n    _ = require('lodash'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { createError } = require('errno').custom,\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    ApplicationError = require('./application-error'),\n    { ERR_TYPE__JSON_PATH_NOT_FOUND } = ApplicationError,\n    { createValidationResponse } = require('./utils');\n\n// CONSTANTS\n\nconst\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ERR_TYPE__JSON_PATH_NOT_FOUND);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      responseSchemasWithExamples: number,\n *      responseExamplesTotal: number,\n *      responseExamplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {ValidationResponse}\n */\nfunction validateExamples(openapiSpec) {\n    const jsonPathToExamples = Determiner.getImplementation(openapiSpec).getJsonPathToExamples(),\n        pathsExamples = _extractExamplePaths(openapiSpec, jsonPathToExamples);\n    return _validateExamplesPaths(pathsExamples, openapiSpec);\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath    File-path to the OpenAPI-spec\n * @returns {ValidationResponse}\n */\nfunction validateFile(filePath) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec);\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to response-schemas as key and a single file-path or Array of\n *                                              file-paths to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @returns {ValidationResponse}\n */\nfunction validateExamplesByMap(filePathSchema, globMapExternalExamples, { cwdToMappingFile } = {}) {\n    let matchingFilePathsMapping = 0;\n    const responses = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    ).map(filePathMapExternalExamples => {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = _parseSpec(filePathSchema);\n        } catch (err) {\n            return createValidationResponse({ errors: [ApplicationError.create(err)] });\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        return _validate(\n            Object.keys(mapExternalExamples),\n            statistics => _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics, {\n                cwdToMappingFile,\n                dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n            }).map((/** @type ApplicationError */ error) => Object.assign(error, {\n                mapFilePath: filePathMapExternalExamples\n            }))\n        );\n    });\n    return _.merge(\n        responses.reduce((res, response) => {\n            if (!res) { return response; }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema      File-path to the OpenAPI-spec\n * @param {String}  pathResponseSchema  JSON-path to the response-schema\n * @param {String}  filePathExample     File-path to the external example-file\n * @returns {ValidationResponse}\n */\nfunction validateExample(filePathSchema, pathResponseSchema, filePathExample) {\n    let example = null,\n        responseSchema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = _parseSpec(filePathSchema);\n        responseSchema = _extractResponseSchema(pathResponseSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        [pathResponseSchema],\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec),\n            responseSchema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nfunction _parseSpec(filePath) {\n    if (_isFileTypeYaml(filePath)) {\n        return yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n    return JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {Array.<String>}      pathsResponseSchema     JSON-paths to the schemas of the responses\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(pathsResponseSchema, validationHandler) {\n    const statistics = _initStatistics({ schemaPaths: pathsResponseSchema }),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to response-\n *                                                                  schemas as key and a single file-path or Array of\n *                                                                  file-paths to\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return _(mapExternalExamples)\n        .entries()\n        .flatMap(([pathResponseSchema, filePathsExample]) => {\n            let responseSchema = null;\n            try {\n                responseSchema = _extractResponseSchema(pathResponseSchema, openapiSpec);\n            } catch (/** @type ErrorJsonPathNotFound */ err) {\n                // If the response-schema can't be found, don't even attempt to process the examples\n                return ApplicationError.create(err);\n            }\n            return _([filePathsExample])\n                .flatten()\n                .flatMap(filePathExample => {\n                    let example = null;\n                    try {\n                        const resolvedFilePathExample = cwdToMappingFile\n                            ? path.join(dirPathMapExternalExamples, filePathExample)\n                            : filePathExample;\n                        example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                    } catch (err) {\n                        return ApplicationError.create(err);\n                    }\n                    return _validateExample({\n                        createValidator: _initValidatorFactory(openapiSpec),\n                        responseSchema,\n                        example,\n                        statistics,\n                        filePathExample\n                    });\n                })\n                .value();\n        })\n        .value();\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: _.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics({ schemaPaths: [] }))\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: 'path'\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths(pathsExamples, openapiSpec) {\n    const\n        createValidator = _initValidatorFactory(openapiSpec),\n        validationMap = _buildValidationMap(pathsExamples),\n        schemaPaths = Object.keys(validationMap),\n        statistics = _initStatistics({ schemaPaths }),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        };\n    schemaPaths.forEach(pathResponseSchema => {\n        _validateResponseSchema({ openapiSpec, createValidator, pathResponseSchema, validationMap, statistics,\n            validationResult });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single response-schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathResponseSchema  JSON-path to response-schema\n * @param {Object.<String, String>} validationMap Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateResponseSchema({ openapiSpec, createValidator, pathResponseSchema, validationMap, statistics,\n    validationResult }) {\n    const\n        errors = validationResult.errors,\n        pathExample = validationMap[pathResponseSchema],\n        example = _getObjectByPath(pathExample, openapiSpec),\n        // Missing response-schemas may occur and are considered valid\n        responseSchema = _extractResponseSchema(pathResponseSchema, openapiSpec, true),\n        curErrors = _validateExample({\n            createValidator,\n            responseSchema,\n            example,\n            statistics\n        }).map(error => {\n            error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n            return error;\n        });\n    if (!curErrors.length) { return; }\n    validationResult.valid = false;\n    errors.splice(errors.length - 1, 0, ...curErrors);\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @param {Array.<String>}  schemaPaths     JSON-paths to the response-schemas\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics({ schemaPaths }) {\n    return {\n        responseSchemasWithExamples: schemaPaths.length,\n        responseExamplesTotal: 0,\n        responseExamplesWithoutSchema: 0\n    };\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: 'value'\n    });\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction _buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = pathExample;\n        return validationMap;\n    }, {});\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      responseSchema      JSON-schema for the response\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, responseSchema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.responseExamplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!responseSchema) {\n        statistics.responseSchemasWithExamples--;\n        statistics.responseExamplesWithoutSchema++;\n        return errors;\n    }\n    const validate = compileValidate(createValidator(), responseSchema);\n    if (validate(example)) { return errors; }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) { return error; }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const\n        pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema) {\n    return getValidatorFactory(specSchema, {\n        allErrors: true\n    });\n}\n\n/**\n * Extracts the response-schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathResponseSchema                  JSON-path to response-schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no response-schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractResponseSchema(pathResponseSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathResponseSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to response-schema can't be found: '${pathResponseSchema}'`, {\n            params: {\n                path: pathResponseSchema\n            }\n        });\n    }\n    return schema;\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"glob\");","module.exports = require(\"yaml\");","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__REPSONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        validator.addSchema(preparedSpecSchema);\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__REPSONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n    return validator.compile(preparedResponseSchema);\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = require(\"json-pointer\");","module.exports = require(\"ajv\");","const implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json';\n\nmodule.exports = {\n    getJsonPathToExamples\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPath to the examples\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToExamples() { return PATH__EXAMPLES; }\n","// CONSTANTS\n\nconst PATH__EXAMPLES = '$..responses..content.application/json.examples..value';\n\n// PUBLIC API\n\nmodule.exports = {\n    getJsonPathToExamples\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPath to the examples\n * @returns {string}    JSONPath\n */\nfunction getJsonPathToExamples() { return PATH__EXAMPLES; }\n","const\n    _ = require('lodash'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const\n            { ERR_TYPE__VALIDATION } = ApplicationError,\n            { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ERR_TYPE__VALIDATION,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ERR_TYPE__VALIDATION === type) {\n            // If it's an validation-error, copy all properties\n            _.merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && _.merge(options, { params: { path } });\n            cause && _.merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = ApplicationError;\n\n// PUBLIC STATICS\n\n// Types of errors\nApplicationError.ERR_TYPE__VALIDATION = 'Validation';\nApplicationError.ERR_TYPE__JSON_PATH_NOT_FOUND = 'JsonPathNotFound';\nApplicationError.ERR_TYPE__JS_ENOENT = ENOENT.code;\n\n","module.exports = {\n    createValidationResponse\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n"],"sourceRoot":""}