{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"jsonpath-plus\"","webpack:///external \"lodash.merge\"","webpack:///external \"path\"","webpack:///external \"json-schema-ref-parser\"","webpack:///external \"errno\"","webpack:///./src/const/result-type.js","webpack:///./src/impl/service/disallow-additional-properties.js","webpack:///external \"lodash.clonedeep\"","webpack:///./src/application-error.js","webpack:///./src/cli.js","webpack:///./package.json","webpack:///external \"commander\"","webpack:///./src/index.js","webpack:///external \"lodash.flatten\"","webpack:///external \"lodash.flatmap\"","webpack:///external \"fs\"","webpack:///external \"glob\"","webpack:///external \"yaml\"","webpack:///./src/validator.js","webpack:///external \"json-pointer\"","webpack:///external \"ajv\"","webpack:///./node_modules/ajv-oai/lib/format-validator.js","webpack:///./node_modules/ajv-oai/lib/constants.js","webpack:///external \"decimal.js\"","webpack:///./src/impl/index.js","webpack:///./src/impl/v2/index.js","webpack:///./src/impl/v3/index.js","webpack:///./src/utils/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","parent","parentProperty","path","pointer","JSONPath","jsonPath","ResultType","JSON_PATHS__OBJECTS","_callbackObjectTypeForNoAdditionalProperties","additionalProperties","_find","json","resultType","callback","flatten","setNoAdditionalProperties","openApiSpec","examplePaths","paths","Set","forEach","jsPath","match","add","examplePath","exampleMatch","startsWith","delete","_excludeExamples","merge","ENOENT","code","ErrorType","jsENOENT","jsonPathNotFound","errorAndErrorsMutuallyExclusive","parseError","validation","ApplicationError","err","message","cause","type","options","params","constructor","assign","this","VERSION","version","program","validateFile","validateExample","validateExamplesByMap","arguments","description","option","action","async","filepath","schemaJsonpath","exampleFilepath","mappingFilepath","cwdToMappingFile","noAdditionalProperties","result","console","log","statistics","schemasWithExamples","examplesWithoutSchema","examplesTotal","matchingFilePathsMapping","strStatistics","push","process","stdout","write","join","_printStatistics","valid","exit","stderr","JSON","stringify","errors","_handleResult","on","parse","argv","flatMap","fs","glob","yaml","refParser","createError","custom","getValidatorFactory","compileValidate","Determiner","createValidationResponse","dereferenceJsonSchema","SYM__INTERNAL","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","validateExamples","openapiSpec","impl","getImplementation","dereference","prepare","pathsExamples","getJsonPathsToExamples","reduce","res","pathToExamples","concat","jsonPathToExamples","_extractExamplePaths","_initStatistics","validationResult","createValidator","_initValidatorFactory","validationMap","buildValidationMap","error","keys","pathSchema","pathExample","example","_getObjectByPath","schema","_extractSchema","curErrors","_validateExample","map","toPointer","toPathArray","length","splice","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","jsonSchema","extension","split","pop","includes","_isFileTypeYaml","readFileSync","e","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","dirPathMapExternalExamples","entries","filePathsExample","filePathExample","resolvedFilePathExample","size","wrap","validate","exampleFilePath","specSchema","allErrors","nullable","suppressErrorIfNotFound","filePathSchema","globMapExternalExamples","filePathsMaps","sync","nonull","responses","filePathMapExternalExamples","dirname","mapFilePath","response","response2","response1","val","schemasWithExample","values","JsonPointer","Ajv","FormatValidator","ID__SPEC_SCHEMA","_replaceRefsToPreparedSpecSchema","payload","preparedSpecSchema","refSchema","substring","definition","set","_createReferenceSchema","validator","addSchema","addFormat","int32","int64","float","double","byte","_addFormatValidators","responseSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","compile","RANGES","data","Number","isInteger","max","greaterThanOrEqualTo","min","lessThanOrEqualTo","len","test","firstPaddingChar","indexOf","Decimal","pow","negated","implV2","implV3","REGEX__OPEN_API","swagger","openapi","cloneDeep","pathSegs","slice","idxExamples","lastIndexOf","toPathString","_getSchemaPathOfExample","openapiSpecCopy","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","pathContextAsArray","pathContext","_throwMutuallyExclusiveError","pathToSchema","currentWorkingDir","cwd","chdir","dereferencedSchema"],"mappings":"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","file":"cli.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"path\");","module.exports = require(\"json-schema-ref-parser\");","module.exports = require(\"errno\");","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nconst JSON_PATHS__OBJECTS = [\n    '$..application/json.schema',\n    '$..schema..[?(@.properties && (@property === \"schema\" || @property === \"items\" || @.type === \"object\"))]'\n];\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallback}   [callback=_callbackObjectTypeForNoAdditionalProperties] Function to be called on a\n *                                                      match\n * @private\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = [],\n    callback = _callbackObjectTypeForNoAdditionalProperties\n) {\n    // Find all matches\n    const paths = new Set();\n    JSON_PATHS__OBJECTS.forEach(jsPath => {\n        _find(openApiSpec, jsPath)\n            .forEach(match => paths.add(match));\n    });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        _find(openApiSpec, jsPath, ResultType.value, callback);\n    }\n}\n\n/**\n * Callback, to set the `additionalProperties` to `false` the object-schemas\n * @type JsonPathMatchCallback\n * @private\n */\nfunction _callbackObjectTypeForNoAdditionalProperties(value) {\n    value.additionalProperties = false;\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n","module.exports = require(\"lodash.clonedeep\");","const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [dataPath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","// Shebang will be added by webpack\n//#!/usr/bin/env node --harmony\n\n/**\n * Command Line Interface for the validator\n */\n\nconst\n    VERSION = require('../package.json').version,\n    program = require('commander'),\n    { validateFile, validateExample, validateExamplesByMap } = require('./index');\n\n// DEFINE CLI\n\nprogram\n    .version(VERSION)\n    .arguments('<filepath>')\n    .description('Validate embedded examples in OpenAPI-specs (JSON and YAML supported).\\n'\n        + '  To validate external examples, use the `-s` and `-e` option.\\n'\n        + '  To pass a mapping-file, to validate multiple external examples, use the `-m` option.')\n    .option('-s, --schema-jsonpath <schema-jsonpath>', 'Path to OpenAPI-schema, to validate the example file against')\n    .option('-e, --example-filepath <example-filepath>', 'file path to example file, to be validated')\n    .option('-m, --mapping-filepath <mapping-filepath>', 'file path to map, containing schema-paths as key and the'\n        + ' file-path(s) to examples as value. If wildcards are used, the parameter has to be put in quotes.')\n    .option('-c, --cwd-to-mapping-file', \"changes to the directory of the mapping-file, before resolving the example's\"\n        + ' paths. Use this option, if your mapping-files use relative paths for the examples')\n    .option('-n, --no-additional-properties', 'don\\'t allow properties that are not described in the schema')\n    .action(processAction);\nprogram.on('--help', () => {\n    console.log('\\n\\n  Example for external example-file:\\n');\n    console.log('    $ openapi-examples-validator -s $.paths./.get.responses.200.schema -e example.json'\n        + ' openapi-spec.json\\n\\n');\n});\nprogram.parse(process.argv);\n\n// IMPLEMENTATION DETAILS\n\nasync function processAction(filepath, options) {\n    const { schemaJsonpath, exampleFilepath, mappingFilepath, cwdToMappingFile } = options,\n        noAdditionalProperties = !options.additionalProperties;\n    let result;\n    if (mappingFilepath) {\n        console.log('Validating with mapping file');\n        result = await validateExamplesByMap(filepath, mappingFilepath, { cwdToMappingFile, noAdditionalProperties });\n    } else if (schemaJsonpath && exampleFilepath) {\n        console.log('Validating single external example');\n        result = await validateExample(filepath, schemaJsonpath, exampleFilepath, { noAdditionalProperties });\n    } else {\n        console.log('Validating examples');\n        result = await validateFile(filepath, { noAdditionalProperties });\n    }\n    _handleResult(result);\n}\n\nfunction _handleResult(result) {\n    _printStatistics(result.statistics);\n    if (result.valid) {\n        process.stdout.write('\\nNo errors found.\\n\\n');\n        process.exit(0);\n    }\n    process.stdout.write('\\nErrors found.\\n\\n');\n    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n    process.exit(1);\n}\n\nfunction _printStatistics(statistics) {\n    const {\n            schemasWithExamples,\n            examplesWithoutSchema,\n            examplesTotal,\n            matchingFilePathsMapping\n        } = statistics,\n        strStatistics = [\n            `Schemas with examples found: ${ schemasWithExamples }`,\n            `Examples without schema found: ${ examplesWithoutSchema }`,\n            `Total examples found: ${ examplesTotal }`\n        ];\n    if (matchingFilePathsMapping != null) {\n        strStatistics.push(`Matching mapping files found: ${ matchingFilePathsMapping }`);\n    }\n    process.stdout.write(`${ strStatistics.join('\\n') }\\n`);\n}\n","module.exports = {\"name\":\"openapi-examples-validator\",\"version\":\"4.0.1\",\"description\":\"Validates embedded examples in OpenAPI-JSONs\",\"main\":\"dist/index.js\",\"engines\":{\"node\":\">=8\"},\"bin\":{\"openapi-examples-validator\":\"dist/cli.js\"},\"standard-version\":{\"scripts\":{\"postchangelog\":\"npm run release:create-dockerfile && npm run release:stage-artifacts\"}},\"scripts\":{\"start-dev\":\"babel-node src/cli\",\"build\":\"npm run build:clean && npm run build:webpack\",\"build:clean\":\"rimraf dist\",\"build:webpack\":\"webpack --bail --progress --profile --mode production --config ./webpack/config.babel.js\",\"coverage\":\"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\"coveralls\":\"cat ./coverage/lcov.info | coveralls\",\"test\":\"npm run build && npm run test:mocha\",\"test-mutations\":\"stryker run\",\"test:mocha\":\"mocha --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\"release\":\"npm run build && standard-version -a\",\"release:create-dockerfile\":\"node etc/src/build-dockerfile.js\",\"release:stage-artifacts\":\"git add dist/*\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/codekie/openapi-examples-validator.git\"},\"keywords\":[\"swagger\",\"openapi\",\"json\",\"validate\",\"examples\"],\"author\":\"Josua Amann\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/codekie/openapi-examples-validator/issues\"},\"homepage\":\"https://github.com/codekie/openapi-examples-validator#readme\",\"devDependencies\":{\"@babel/cli\":\"^7.10.4\",\"@babel/core\":\"^7.10.4\",\"@babel/node\":\"^7.10.4\",\"@babel/preset-env\":\"^7.10.4\",\"@babel/register\":\"^7.10.4\",\"@stryker-mutator/babel-transpiler\":\"^3.3.1\",\"@stryker-mutator/core\":\"^3.3.1\",\"@stryker-mutator/javascript-mutator\":\"^3.3.1\",\"@stryker-mutator/mocha-framework\":\"^3.3.1\",\"@stryker-mutator/mocha-runner\":\"^3.3.1\",\"@stryker-mutator/webpack-transpiler\":\"^3.3.1\",\"babel-eslint\":\"^10.1.0\",\"babel-loader\":\"^8.1.0\",\"chai\":\"^4.2.0\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.4.0\",\"eslint-loader\":\"^4.0.2\",\"json-loader\":\"^0.5.7\",\"mocha\":\"^7.1.2\",\"mocha-lcov-reporter\":\"^1.3.0\",\"nyc\":\"^15.1.0\",\"rimraf\":\"^3.0.2\",\"standard-version\":\"^8.0.2\",\"stryker-cli\":\"1.0.0\",\"webpack\":\"^4.43.0\",\"webpack-cli\":\"^3.3.12\"},\"dependencies\":{\"ajv\":\"^6.12.5\",\"ajv-oai\":\"1.2.1\",\"commander\":\"^5.1.0\",\"errno\":\"0.1.7\",\"glob\":\"^7.1.6\",\"json-pointer\":\"0.6.1\",\"json-schema-ref-parser\":\"^9.0.6\",\"jsonpath-plus\":\"^4.0.0\",\"lodash.clonedeep\":\"^4.5.0\",\"lodash.flatmap\":\"^4.5.0\",\"lodash.flatten\":\"^4.4.0\",\"lodash.merge\":\"^4.6.2\",\"yaml\":\"^1.10.0\"}}","module.exports = require(\"commander\");","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties } = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties });\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_extractExamplePaths(openapiSpec, pathToExamples));\n        }, []);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec);\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (let filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, becuse it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples)\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: filePathMapExternalExamples\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) { return response; }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, { noAdditionalProperties } = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties });\n        schema = _extractSchema(pathSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${ name }: ${ message }` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(pathSchema, openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let example = null;\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    example = JSON.parse(fs.readFileSync(resolvedFilePathExample, 'utf-8'));\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec),\n                    schema,\n                    example,\n                    statistics,\n                    filePathExample\n                });\n            }\n        );\n    });\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: ResultType.path\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec);\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPaths = Object.keys(validationMap);\n    schemaPaths.forEach(pathSchema => {\n        _validateSchema({ openapiSpec, createValidator, pathSchema, validationMap, statistics,\n            validationResult });\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathSchema          JSON-path to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({ openapiSpec, createValidator, pathSchema, validationMap, statistics,\n    validationResult }) {\n    const errors = validationResult.errors;\n    validationMap[pathSchema].forEach(pathExample => {\n        const example = _getObjectByPath(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(pathSchema, openapiSpec, true),\n            curErrors = _validateExample({\n                createValidator,\n                schema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) { return; }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: ResultType.value\n    });\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) { return errors; }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) { return error; }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema) {\n    return getValidatorFactory(specSchema, {\n        allErrors: true,\n        nullable: true\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathSchema                          JSON-path to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the repsonse does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(pathSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${ pathSchema }'`, {\n            params: {\n                path: pathSchema\n            }\n        });\n    }\n    return schema;\n}\n","module.exports = require(\"lodash.flatten\");","module.exports = require(\"lodash.flatmap\");","module.exports = require(\"fs\");","module.exports = require(\"glob\");","module.exports = require(\"yaml\");","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv'),\n    FormatValidator = require('ajv-oai/lib/format-validator');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__REPSONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        validator.addSchema(preparedSpecSchema);\n        _addFormatValidators(validator);\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__REPSONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n    return validator.compile(preparedResponseSchema);\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n\n/**\n * Adds format-validators that are not included in the reference-implementation\n * @param {ajv.Ajv} validator\n * @private\n */\nfunction _addFormatValidators(validator) {\n    validator.addFormat('int32', { type: 'number', validate: FormatValidator.int32 });\n    validator.addFormat('int64', { type: 'string', validate: FormatValidator.int64 });\n    validator.addFormat('float', { type: 'number', validate: FormatValidator.float });\n    validator.addFormat('double', { type: 'number', validate: FormatValidator.double });\n    validator.addFormat('byte', { type: 'string', validate: FormatValidator.byte });\n}\n","module.exports = require(\"json-pointer\");","module.exports = require(\"ajv\");","const RANGES = require('./constants');\n\n/**\n * OpenAPI 2.0 data types format\n * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types\n */\n\n/**\n * Check that the data is integer and int32\n * @param {number} data\n * @returns {boolean}\n */\nfunction int32(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int32.max.greaterThanOrEqualTo(data) &&\n    RANGES.int32.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is integer and int64\n * @param {number} data\n * @returns {boolean}\n */\nfunction int64(data) {\n  return (\n    Number.isInteger(+data) &&\n    RANGES.int64.max.greaterThanOrEqualTo(data) &&\n    RANGES.int64.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is float\n * @param {number} data\n * @returns {boolean}\n */\nfunction float(data) {\n  return (\n    RANGES.float.max.greaterThanOrEqualTo(data) &&\n    RANGES.float.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is double\n * @param {number} data\n * @returns {boolean}\n */\nfunction double(data) {\n  return (\n    RANGES.double.max.greaterThanOrEqualTo(data) &&\n    RANGES.double.min.lessThanOrEqualTo(data)\n  );\n}\n\n/**\n * Check that the data is string and base64 encoded characters.\n * https://github.com/chriso/validator.js/blob/master/src/lib/isBase64.js\n * @param {string} data\n * @returns {boolean}\n */\nfunction byte(data) {\n  /* eslint-disable no-useless-escape */\n  const notBase64 = /[^A-Z0-9+\\/=]/i;\n  /* eslint-enable no-useless-escape */\n\n  const len = data.length;\n  if (!len || len % 4 !== 0 || notBase64.test(data)) {\n    return false;\n  }\n  const firstPaddingChar = data.indexOf('=');\n  return firstPaddingChar === -1 ||\n    firstPaddingChar === len - 1 ||\n    (firstPaddingChar === len - 2 && data[len - 1] === '=');\n}\n\nmodule.exports = {\n  int32,\n  int64,\n  float,\n  double,\n  byte,\n};\n","const Decimal = require('decimal.js');\n\n// Numeric type ranges\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\n// https://msdn.microsoft.com/en-us/library/s3f49ktz.aspx\n// https://en.wikipedia.org/wiki/C_data_types\n\nconst RANGES = {\n  byte: {\n    min: new Decimal('-128'),\n    max: new Decimal('127'),\n  },\n\n  int32: {\n    min: new Decimal('-2147483648'),\n    max: new Decimal('2147483647'),\n  },\n\n  int64: {\n    min: new Decimal('-9223372036854775808'),\n    max: new Decimal('9223372036854775807'),\n  },\n\n  float: {\n    min: new Decimal(2).pow(128).negated(),\n    max: new Decimal(2).pow(128),\n  },\n\n  double: {\n    min: new Decimal(2).pow(1024).negated(),\n    max: new Decimal(2).pow(1024),\n  },\n};\n\nmodule.exports = RANGES;\n","module.exports = require(\"decimal.js\");","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    { setNoAdditionalProperties } = require('../service/disallow-additional-properties'),\n    cloneDeep = require('lodash.clonedeep');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setNoAdditionalProperties } = require('../service/disallow-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLE = '$..responses..content.application/json.example',\n    PATH__EXAMPLES = '$..responses..content.application/json.examples.*.value',\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = '$..requestBody.content.application/json.example',\n    PATH__EXAMPLES__REQUEST_BODY = '$..requestBody.content.application/json.examples.*.value',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    getJsonPathsToExamples,\n    prepare\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPathOfExample(pathExample),\n            pathSchema = jsonPath.toPathString(pathSchemaAsArray),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n *\n * It is assumed that the JSON-path to the example is valid and existing.\n * @param {String}  pathExample JSON-path to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: jsonPath.toPointer(pathContextAsArray)\n        }\n    });\n}\n","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n"],"sourceRoot":""}